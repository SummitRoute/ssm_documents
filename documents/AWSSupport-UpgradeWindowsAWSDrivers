{
  "schemaVersion": "0.3",
  "description": "The AWSSupport-UpgradeWindowsAWSDrivers upgrades or repairs storage and network AWS drivers on the specified EC2 instance. The document attempts to install the latest versions of AWS drivers online by calling the SSM agent. If the SSM agent is not contactable, the document can perform an offline installation of the AWS drivers if explicitly requested. Note: Both the online and offline upgrade will create an AMI before attempting any operations, which will persist after the automation completes. It is your responsibility to secure access to the AMI, or to delete it. The online method restarts the instance as part of the upgrade process, while the offline method requires the provided EC2 instance be stopped and then started.",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "InstanceId": {
      "type": "String",
      "description": "(Required) ID of your EC2 Windows instance.",
      "allowedPattern": "^i-[a-z0-9]{8,17}$"
    },
    "AllowOffline": {
      "type": "String",
      "description": "(Optional) Set it to true if you allow an offline drivers upgrade in case the online installation cannot be performed. Note: The offline method requires the provided EC2 instance be stopped and then started. Data stored in instance store volumes will be lost. The public IP address will change if you are not using an Elastic IP.",
      "default": "False",
      "allowedValues": [
        "True",
        "False"
      ]
    },
    "SubnetId": {
      "type": "String",
      "description": "(Optional) Offline only - The subnet ID for the EC2Rescue instance used to perform the offline drivers upgrade. If you specify CreateNewVPC, AWS Systems Manager Automation will create a new VPC. IMPORTANT: The subnet must be in the same Availability Zone as InstanceId, and it must allow access to the SSM endpoints.",
      "default": "SelectedInstanceSubnet",
      "allowedPattern": "^SelectedInstanceSubnet$|^CreateNewVPC$|^subnet-[a-z0-9]{8,17}$"
    },
    "ForceUpgrade": {
      "type": "String",
      "description": "(Optional) Offline only - Set it to true if you allow the offline drivers upgrade to proceed even though your instance already has the latest drivers installed.",
      "default": "False",
      "allowedValues": [
        "True",
        "False"
      ]
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Optional) The ARN of the role that allows Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses your IAM permissions to execute this document.",
      "default": ""
    }
  },
  "mainSteps": [
    {
      "name": "assertInstanceIsWindows",
      "action": "aws:assertAwsResourceProperty",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstances",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "PropertySelector": "$.Reservations[0].Instances[0].Platform",
        "DesiredValues": [
          "windows"
        ]
      },
      "isCritical": "true",
      "nextStep": "describeManagedInstance"
    },
    {
      "name": "describeManagedInstance",
      "action": "aws:executeAwsApi",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ssm",
        "Api": "DescribeInstanceInformation",
        "InstanceInformationFilterList": [
          {
            "key": "InstanceIds",
            "valueSet": [
              "{{ InstanceId }}"
            ]
          }
        ]
      },
      "outputs": [
        {
          "Name": "PingStatus",
          "Selector": "$.InstanceInformationList[0].PingStatus"
        }
      ],
      "isCritical": "true",
      "nextStep": "branchOnManagedInstancePingStatus"
    },
    {
      "name": "branchOnManagedInstancePingStatus",
      "action": "aws:branch",
      "onFailure": "Abort",
      "inputs": {
        "Choices": [
          {
            "NextStep": "preUpgradeBackup",
            "Variable": "{{ describeManagedInstance.PingStatus }}",
            "StringEquals": "Online"
          }
        ],
        "Default": "assertAllowOffline"
      },
      "isCritical": "true"
    },
    {
      "name": "preUpgradeBackup",
      "action": "aws:executeAwsApi",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ec2",
        "Api": "CreateImage",
        "InstanceId": "{{ InstanceId }}",
        "Description": "Pre-Upgrade Backup AMI Generated by Automation on {{ global:DATE_TIME }} from {{ InstanceId }}.",
        "NoReboot": false,
        "Name": "AWSSupport-Pre-Upgrade-Backup_{{ InstanceId }}_{{ global:DATE_TIME }}"
      },
      "outputs": [
        {
          "Name": "ImageId",
          "Selector": "$.ImageId",
          "Type": "String"
        }
      ],
      "isCritical": "true",
      "nextStep": "tagPreUpgradeBackup"
    },
    {
      "name": "tagPreUpgradeBackup",
      "action": "aws:createTags",
      "onFailure": "Continue",
      "inputs": {
        "ResourceIds": [
          "{{ preUpgradeBackup.ImageId }}"
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "AWSSupport-UpgradeWindowsAWSDrivers: {{ InstanceId }}"
          },
          {
            "Key": "AWSSupport-UpgradeWindowsAWSDrivers-AutomationExecution",
            "Value": "{{ automation:EXECUTION_ID }}"
          }
        ],
        "ResourceType": "EC2"
      },
      "isCritical": "false",
      "nextStep": "installAwsEnaNetworkDriverOnInstance"
    },
    {
      "name": "installAwsEnaNetworkDriverOnInstance",
      "action": "aws:runCommand",
      "onFailure": "Continue",
      "inputs": {
        "DocumentName": "AWS-RunPowerShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "try {",
            "    if (Test-Path -Path \"ena-state-{{ automation:EXECUTION_ID }}\") {",
            "        if (Select-String -Path \"ena-state-{{ automation:EXECUTION_ID }}\" -Pattern \"success\") {",
            "            Write-Host \"Installer has already run. Skipping installation\"",
            "            exit 0",
            "        }",
            "        else {",
            "            Write-Host \"Previous run of installer marked as failure. Skipping installation\"",
            "            exit 1",
            "        }",
            "    }",
            "    else {",
            "        # Download drivers",
            "        $url = \"https://s3.amazonaws.com/ec2-windows-drivers-downloads/ENA/Latest/AwsEnaNetworkDriver.zip\"",
            "        $tempPath = (Resolve-Path ${env:temp}).Path",
            "        Write-Host \"Downloading AWS ENA drivers\"",
            "        $tempFile = \"${tempPath}\\AwsEnaNetworkDriver.zip\"",
            "        $tempDir = \"${tempPath}\\AwsEnaNetworkDriver\"",
            "        $wc = New-Object \"System.Net.WebClient\"",
            "        $wc.Headers.Add(\"user-agent\", \"AWSSupport-UpgradeWindowsAWSDrivers\")",
            "        $wc.DownloadFile($url, $tempFile)",
            "        if (Test-Path $tempDir) {",
            "            Remove-Item -Path $tempDir -Recurse -Force",
            "        }",
            "",
            "        # Extract drivers",
            "        Add-Type -AssemblyName System.IO.Compression.FileSystem",
            "        [System.IO.Compression.ZipFile]::ExtractToDirectory($tempFile, $tempDir)",
            "",
            "        # Run install.ps1",
            "        Write-Host \"Running install script\"",
            "        $output = & \"${tempDir}\\install.ps1\" -NoReboot",
            "        Write-Host $output",
            "",
            "        # Evaluate output",
            "        New-Item \"ena-state-{{ automation:EXECUTION_ID }}\" -ItemType file | Out-Null",
            "        if ($output -match \"successful\") {",
            "            if ($output -match \"reboot\") {",
            "                Write-Host \"Rebooting to complete installation\"",
            "                Write-Output \"success\" | Set-Content -Path \"ena-state-{{ automation:EXECUTION_ID }}\"",
            "                exit 3010",
            "            }",
            "            Write-Output \"success\" | Set-Content -Path \"ena-state-{{ automation:EXECUTION_ID }}\"",
            "            exit 0",
            "        }",
            "        else {",
            "            Write-Output \"failure\" | Set-Content -Path \"ena-state-{{ automation:EXECUTION_ID }}\"",
            "            exit 1",
            "        }",
            "    }",
            "}",
            "catch {",
            "    Write-Host $_.Exception.Message",
            "    exit 255",
            "}"
          ]
        }
      },
      "isCritical": "true",
      "nextStep": "installAWSNVMeOnInstance"
    },
    {
      "name": "installAWSNVMeOnInstance",
      "action": "aws:runCommand",
      "onFailure": "Continue",
      "inputs": {
        "DocumentName": "AWS-RunPowerShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "try {",
            "    if (Test-Path -Path \"nvme-state-{{ automation:EXECUTION_ID }}\") {",
            "        if (Select-String -Path \"nvme-state-{{ automation:EXECUTION_ID }}\" -Pattern \"success\") {",
            "            Write-Host \"Installer has already run. Skipping installation\"",
            "            exit 0",
            "        }",
            "        else {",
            "            Write-Host \"Previous run of installer marked as failure. Skipping installation\"",
            "            exit 1",
            "        }",
            "    }",
            "    else {",
            "        # Download drivers",
            "        $url = \"https://s3.amazonaws.com/ec2-windows-drivers-downloads/NVMe/Latest/AWSNVMe.zip\"",
            "        $tempPath = (Resolve-Path ${env:temp}).Path",
            "        Write-Host \"Downloading AWS NVMe drivers\"",
            "        $tempFile = \"${tempPath}\\AWSNVMe.zip\"",
            "        $tempDir = \"${tempPath}\\AWSNVMe\"",
            "        $wc = New-Object \"System.Net.WebClient\"",
            "        $wc.Headers.Add(\"user-agent\", \"AWSSupport-UpgradeWindowsAWSDrivers\")",
            "        $wc.DownloadFile($url, $tempFile)",
            "        if (Test-Path $tempDir) {",
            "            Remove-Item -Path $tempDir -Recurse -Force",
            "        }",
            "",
            "        # Extract drivers",
            "        Add-Type -AssemblyName System.IO.Compression.FileSystem",
            "        [System.IO.Compression.ZipFile]::ExtractToDirectory($tempFile, $tempDir)",
            "",
            "        # Run install.ps1",
            "        Write-Host \"Running install script\"",
            "        $output = & \"${tempDir}\\install.ps1\" -NoReboot",
            "        Write-Host $output",
            "",
            "        # Handling drivers reflection: https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/migrating-latest-types.html#upgrade-nvme",
            "        # Driver reflection is required only for Windows Server 2008 R2 and Windows Server 2012 instances",
            "        $allowedWinVer = $false",
            "        $osVer = [System.Environment]::OSVersion.Version",
            "        if ($osVer.Major -eq 6) {",
            "            $allowedMinor = @(1, 2)",
            "            if ($allowedMinor -contains $osVer.Minor) {",
            "                $allowedWinVer = $true",
            "            }",
            "        }",
            "        if ($allowedWinVer) {",
            "            # Checking instance type architecture to ensure it is not a Nitro instance type",
            "            $allowedInstanceType = $false",
            "            $ErrorActionPreference = \"stop\"",
            "            try {",
            "                $systemVersion = (Get-ItemProperty -Path HKLM:\\HARDWARE\\DESCRIPTION\\System\\BIOS -Name SystemVersion).SystemVersion",
            "                $systemManufacturer = (Get-ItemProperty -Path HKLM:\\HARDWARE\\DESCRIPTION\\System\\BIOS -Name SystemManufacturer).SystemManufacturer",
            "            }",
            "            catch [System.Management.Automation.PSArgumentException] {}",
            "            finally { $ErrorActionPreference = \"Continue\" }",
            "            if (($systemVersion -match \"amazon\") -and ($systemManufacturer -match \"Xen\")) {",
            "                $allowedInstanceType = $true",
            "            }",
            "            if ($allowedInstanceType) {",
            "                Write-Host \"Reflecting Boot Critical drivers\"",
            "                Start-Process -PassThru -Wait -FilePath \"$env:systemroot\\System32\\rundll32.exe\" -ArgumentList \"sppnp.dll,Sysprep_Generalize_Pnp\" | Out-Null",
            "            }",
            "        }",
            "",
            "        # Evaluate output",
            "        New-Item \"nvme-state-{{ automation:EXECUTION_ID }}\" -ItemType file | Out-Null",
            "        if ($output -match \"completed\") {",
            "            if ($output -match \"reboot\") {",
            "                Write-Host \"Rebooting to complete installation\"",
            "                Write-Output \"success\" | Set-Content -Path \"nvme-state-{{ automation:EXECUTION_ID }}\"",
            "                exit 3010",
            "            }",
            "            Write-Output \"success\" | Set-Content -Path \"nvme-state-{{ automation:EXECUTION_ID }}\"",
            "            exit 0",
            "        }",
            "        else {",
            "            Write-Output \"failure\" | Set-Content -Path \"nvme-state-{{ automation:EXECUTION_ID }}\"",
            "            exit 1",
            "        }",
            "    }",
            "}",
            "catch {",
            "    Write-Host $_.Exception.Message",
            "    exit 255",
            "}"
          ]
        }
      },
      "isCritical": "true",
      "nextStep": "installAWSPVDriverOnInstance"
    },
    {
      "name": "installAWSPVDriverOnInstance",
      "action": "aws:runCommand",
      "onFailure": "Abort",
      "inputs": {
        "DocumentName": "AWS-RunPowerShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "try {        ",
            "    if ((Get-WmiObject -Class Win32_OperatingSystem).ProductType -eq 2) {",
            "        Write-Host \"This is a domain controller. Use the following procedure on a domain controller to perform either an in-place upgrade of AWS PV drivers, or to upgrade from Citrix PV drivers to AWS PV drivers: https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/Upgrading_PV_drivers.html#aws-pv-upgrade-dc.\"",
            "        exit 1",
            "    }",
            "    ",
            "    if (Test-Path -Path \"pv-state-{{ automation:EXECUTION_ID }}\") {",
            "        if (Select-String -Path \"pv-state-{{ automation:EXECUTION_ID }}\" -Pattern \"success\") {",
            "            Write-Host \"Installer has already run. Skipping installation\"",
            "            exit 0",
            "        }",
            "        else {",
            "            Write-Host \"Previous run of installer marked as failure. Skipping installation\"",
            "            exit 1",
            "        }",
            "    }",
            "    else {",
            "        # Download drivers",
            "        $url = \"https://s3.amazonaws.com/ec2-windows-drivers-downloads/AWSPV/Latest/AWSPVDriver.zip\"",
            "        $tempPath = (Resolve-Path ${env:temp}).Path",
            "        Write-Host \"Downloading AWS PV drivers\"",
            "        $tempFile = \"${tempPath}\\AWSPVDriver.zip\"",
            "        $tempDir = \"${tempPath}\\AWSPVDriver\"",
            "        $wc = New-Object \"System.Net.WebClient\"",
            "        $wc.Headers.Add(\"user-agent\", \"AWSSupport-UpgradeWindowsAWSDrivers\")",
            "        $wc.DownloadFile($url, $tempFile)",
            "        if (Test-Path $tempDir) {",
            "            Remove-Item -Path $tempDir -Recurse -Force",
            "        }",
            "",
            "        # Extract drivers",
            "        Add-Type -AssemblyName System.IO.Compression.FileSystem",
            "        [System.IO.Compression.ZipFile]::ExtractToDirectory($tempFile, $tempDir)",
            "",
            "        # Run install.ps1",
            "        Write-Host \"Running install script\"",
            "        $exitCode = & \"${tempDir}\\install.ps1\" -Quiet -NoReboot -VerboseLogging",
            "",
            "        # Evaluate exit code",
            "        New-Item \"pv-state-{{ automation:EXECUTION_ID }}\" -ItemType file | Out-Null",
            "        if ($exitcode -ne 0 -and $exitcode -ne 3010) {",
            "            Write-Host \"Installation failed with code $exitcode.\"",
            "            Write-Output \"failure\" | Set-Content -Path \"pv-state-{{ automation:EXECUTION_ID }}\"",
            "            exit 1",
            "        }",
            "        else {",
            "            Write-Host \"Rebooting to complete installation.\"",
            "            Write-Output \"success\" | Set-Content -Path \"pv-state-{{ automation:EXECUTION_ID }}\"",
            "            exit 3010",
            "        }",
            "    }",
            "}",
            "catch {",
            "    Write-Host $_.Exception.Message",
            "    exit 255",
            "}"
          ]
        }
      },
      "isCritical": "true",
      "isEnd": "true"
    },
    {
      "name": "assertAllowOffline",
      "action": "aws:assertAwsResourceProperty",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ssm",
        "Api": "GetAutomationExecution",
        "AutomationExecutionId": "{{ automation:EXECUTION_ID }}",
        "PropertySelector": "$.AutomationExecution.Parameters.AllowOffline[0]",
        "DesiredValues": [
          "True"
        ]
      },
      "isCritical": "true",
      "nextStep": "stopInstance"
    },
    {
      "name": "stopInstance",
      "action": "aws:changeInstanceState",
      "onFailure": "Continue",
      "inputs": {
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "CheckStateOnly": false,
        "DesiredState": "stopped"
      },
      "isCritical": "false",
      "nextStep": "forceStopInstance"
    },
    {
      "name": "forceStopInstance",
      "action": "aws:changeInstanceState",
      "onFailure": "Abort",
      "inputs": {
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "CheckStateOnly": false,
        "DesiredState": "stopped",
        "Force": true
      },
      "isCritical": "true",
      "nextStep": "preOfflineUpgradeBackup"
    },
    {
      "name": "preOfflineUpgradeBackup",
      "action": "aws:executeAwsApi",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ec2",
        "Api": "CreateImage",
        "InstanceId": "{{ InstanceId }}",
        "Description": "Pre-upgrade Backup AMI Generated by Automation on {{ global:DATE_TIME }} from {{ InstanceId }}.",
        "NoReboot": false,
        "Name": "UpgradeWindowsAWSDrivers-Pre-Script-Backup_{{ InstanceId }}_{{ global:DATE_TIME }}"
      },
      "outputs": [
        {
          "Name": "ImageId",
          "Selector": "$.ImageId",
          "Type": "String"
        }
      ],
      "isCritical": "true",
      "nextStep": "tagPreOfflineUpgradeBackup"
    },
    {
      "name": "tagPreOfflineUpgradeBackup",
      "action": "aws:createTags",
      "onFailure": "Continue",
      "inputs": {
        "ResourceType": "EC2",
        "ResourceIds": [
          "{{ preOfflineUpgradeBackup.ImageId }}"
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "AWSSupport-UpgradeWindowsAWSDrivers: {{ InstanceId }}"
          },
          {
            "Key": "AWSSupport-UpgradeWindowsAWSDrivers-AutomationExecution",
            "Value": "{{ automation:EXECUTION_ID }}"
          }
        ]
      },
      "isCritical": "false",
      "nextStep": "enableEnaSupport"
    },
    {
      "name": "enableEnaSupport",
      "onFailure": "Continue",
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "ec2",
        "Api": "ModifyInstanceAttribute",
        "InstanceId": "{{ InstanceId }}",
        "EnaSupport": {
          "Value": true
        }
      },
      "isCritical": "true",
      "nextStep": "branchOnForceUpgrade"
    },
    {
      "name": "branchOnForceUpgrade",
      "action": "aws:branch",
      "onFailure": "step:startInstance",
      "inputs": {
        "Choices": [
          {
            "NextStep": "upgradeDriversOffline",
            "Variable": "{{ ForceUpgrade }}",
            "StringEquals": "False"
          },
          {
            "NextStep": "forceUpgradeDriversOffline",
            "Variable": "{{ ForceUpgrade }}",
            "StringEquals": "True"
          }
        ]
      },
      "isCritical": "true"
    },
    {
      "name": "upgradeDriversOffline",
      "onFailure": "Continue",
      "action": "aws:executeAutomation",
      "inputs": {
        "RuntimeParameters": {
          "InstanceId": [
            "{{ InstanceId }}"
          ],
          "OfflineScript": [
            "U2V0LUJvb3REcml2ZXJzS2V5IC1XaW5kb3dzSW5zdGFsbERhdGEgJHNjcmlwdDpFQzJSRVNDVUVfT0ZGTElORV9XSU5ET1dTX0lOU1RBTEwNCkluc3RhbGwtUFZEcml2ZXJzIC1XaW5kb3dzSW5zdGFsbERhdGEgJHNjcmlwdDpFQzJSRVNDVUVfT0ZGTElORV9XSU5ET1dTX0lOU1RBTEwNCkluc3RhbGwtTml0cm9Ecml2ZXJzIC1XaW5kb3dzSW5zdGFsbERhdGEgJHNjcmlwdDpFQzJSRVNDVUVfT0ZGTElORV9XSU5ET1dTX0lOU1RBTEw="
          ],
          "SubnetId": [
            "{{ SubnetId }}"
          ],
          "UniqueId": "{{ automation:EXECUTION_ID }}"
        },
        "DocumentName": "AWSSupport-StartEC2RescueWorkflow"
      },
      "isCritical": "true",
      "nextStep": "startInstance"
    },
    {
      "name": "forceUpgradeDriversOffline",
      "onFailure": "Continue",
      "action": "aws:executeAutomation",
      "inputs": {
        "RuntimeParameters": {
          "InstanceId": [
            "{{ InstanceId }}"
          ],
          "OfflineScript": [
            "U2V0LUJvb3REcml2ZXJzS2V5IC1XaW5kb3dzSW5zdGFsbERhdGEgJHNjcmlwdDpFQzJSRVNDVUVfT0ZGTElORV9XSU5ET1dTX0lOU1RBTEwNCkluc3RhbGwtUFZEcml2ZXJzIC1XaW5kb3dzSW5zdGFsbERhdGEgJHNjcmlwdDpFQzJSRVNDVUVfT0ZGTElORV9XSU5ET1dTX0lOU1RBTEwgLUZvcmNlDQpJbnN0YWxsLU5pdHJvRHJpdmVycyAtV2luZG93c0luc3RhbGxEYXRhICRzY3JpcHQ6RUMyUkVTQ1VFX09GRkxJTkVfV0lORE9XU19JTlNUQUxMIC1Gb3JjZQ=="
          ],
          "SubnetId": [
            "{{ SubnetId }}"
          ],
          "UniqueId": "{{ automation:EXECUTION_ID }}"
        },
        "DocumentName": "AWSSupport-StartEC2RescueWorkflow"
      },
      "isCritical": "true",
      "nextStep": "startInstance"
    },
    {
      "name": "startInstance",
      "action": "aws:changeInstanceState",
      "onFailure": "Abort",
      "inputs": {
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "CheckStateOnly": false,
        "DesiredState": "running"
      },
      "isCritical": "true",
      "isEnd": "true"
    }
  ],
  "outputs": [
    "preUpgradeBackup.ImageId",
    "preOfflineUpgradeBackup.ImageId",
    "installAwsEnaNetworkDriverOnInstance.Output",
    "installAWSNVMeOnInstance.Output",
    "installAWSPVDriverOnInstance.Output",
    "upgradeDriversOffline.Output",
    "forceUpgradeDriversOffline.Output"
  ]
}
