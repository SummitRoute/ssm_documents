{
  "schemaVersion": "2.2",
  "description": "Performs sysprep on Windows Server 2008 SP2 and above.  Does not shutdown the instance.",
  "parameters": {
    "Id": {
      "type": "String",
      "description": "(Optional) A user specified ID for the execution of sysprep.",
      "default": ""
    }
  },
  "mainSteps": [
    {
      "action": "aws:runPowerShellScript",
      "name": "RunSysprep",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Windows"
        ]
      },
      "inputs": {
        "timeoutSeconds": 14400,
        "runCommand": [
          "",
          "$zipFilename = 'AWSUpdateWindowsInstance_1_4_4_0.zip'",
          "$zipFileHash = 'CD337ADCFBA463DE895B8D8248A3991940ABB03ADF8525ECA1302385D6A1DDA6'",
          "$moduleName = 'AWSUpdateWindowsInstance'",
          "$tempPath = $env:TEMP",
          "$moduleDirectory = Join-Path $tempPath -ChildPath $moduleName",
          "$moduleZipFilePath = Join-Path $tempPath -ChildPath $zipFilename",
          "$moduleManifestPath = Join-Path $moduleDirectory -ChildPath ('{0}.psd1' -f $moduleName)",
          "$id = '{{Id}}'",
          "",
          "function Main {",
          "  Test-PreCondition",
          "  Clear-WindowsUpdateModule",
          "  Get-WindowsUpdateModule",
          "  Expand-WindowsUpdateModule",
          "  Invoke-RunSysprep",
          "}",
          "function Test-PreCondition {",
          "  $osversion = [Environment]::OSVersion.Version",
          "  if ($osversion.Major -le 5) {",
          "    Write-Host 'This document is not supported on Windows Server 2003 or earlier.'",
          "    Exit -1",
          "  }",
          "",
          "  if ($osversion.Version -ge '10.0') {",
          "    $sku = (Get-CimInstance -ClassName Win32_OperatingSystem).OperatingSystemSKU",
          "    if ($sku -eq 143 -or $sku -eq 144) {",
          "        Write-Host 'This document is not supported on Windows 2016 Nano Server.'",
          "        Exit -1",
          "    }",
          "  }",
          "}",
          "",
          "function Clear-WindowsUpdateModule {",
          "  try {",
          "    if (Test-Path $moduleDirectory) {",
          "      Remove-Item $moduleDirectory -Force -Recurse",
          "    }",
          "    if (Test-Path $moduleZipFilePath) {",
          "      Remove-Item $moduleZipFilePath -Force",
          "    }",
          "  } catch {",
          "    Write-Host \"Cleaning Windows update module resulted in error: $($_)\"",
          "  }",
          "}",
          "",
          "function Get-WindowsUpdateModule {",
          "  try {",
          "    $ssmAgentService = Get-ItemProperty 'HKLM:SYSTEM\\CurrentControlSet\\Services\\AmazonSSMAgent\\' -ErrorAction SilentlyContinue",
          "    if($ssmAgentService -and $ssmAgentService.Version -ge '2.0.533.0') {",
          "      $region = $env:AWS_SSM_REGION_NAME",
          "    }",
          "",
          "    if(-not $region) {",
          "      try {",
          "        $identityDocumentUrl = 'http://169.254.169.254/latest/dynamic/instance-identity/document'",
          "        $region = ((Invoke-WebRequest -UseBasicParsing -uri $identityDocumentUrl).Content | ConvertFrom-Json).region",
          "      } catch {",
          "        $region = 'us-east-1'",
          "      }",
          "    }",
          "",
          "",
          "    if ($region.StartsWith('cn-')) {",
          "      $s3Location = 'https://s3.{0}.amazonaws.com.cn/aws-windows-downloads-{0}/PSModules/AWSUpdateWindowsInstance/{1}'",
          "    } elseif($region.StartsWith('us-gov-')) {",
          "      $s3Location = 'https://s3-fips-{0}.amazonaws.com/aws-windows-downloads-{0}/PSModules/AWSUpdateWindowsInstance/{1}'",
          "    } elseif($region -eq 'us-east-1') {",
          "      $s3Location = 'https://s3.amazonaws.com/aws-windows-downloads-{0}/PSModules/AWSUpdateWindowsInstance/{1}'",
          "    } else {",
          "      $s3Location = 'https://aws-windows-downloads-{0}.s3.amazonaws.com/PSModules/AWSUpdateWindowsInstance/{1}'",
          "    }",
          "",
          "    $source = $s3Location -f $region, $zipFilename",
          "    $moduleLocalPath = Join-Path $tempPath -ChildPath $zipFilename",
          "    Start-BitsTransfer -Source $source -Destination $moduleLocalPath",
          "",
          "    $fileStream = New-Object System.IO.FileStream($moduleLocalPath, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read)",
          "    $sha256 = [System.Security.Cryptography.HashAlgorithm]::Create('System.Security.Cryptography.SHA256CryptoServiceProvider')",
          "    $currentHash = [System.BitConverter]::ToString($sha256.ComputeHash($fileStream), 0).Replace('-', '').ToLowerInvariant()",
          "    $sha256.Dispose()",
          "    $fileStream.Dispose()",
          "",
          "    if ($currentHash -ne $zipFileHash) {",
          "      Write-Host 'The SHA hash of the module does not match the expected value.'",
          "      Exit -1",
          "    }",
          "  } catch {",
          "    Write-Host ('Error encountered while getting the module: {0}.' -f $_.Exception.Message)",
          "    Exit -1",
          "  }",
          "}",
          "",
          "function Expand-WindowsUpdateModule {",
          "  try {",
          "    [System.Reflection.Assembly]::LoadWithPartialName('System.IO.Compression.FileSystem') | Out-Null",
          "    $zip = [System.IO.Compression.ZipFile]::OpenRead($moduleZipFilePath)",
          "    foreach ($item in $zip.Entries) {",
          "      $extractPath = Join-Path $tempPath -ChildPath $item.FullName",
          "      if ($item.Length -eq 0) {",
          "        if (-not (Test-Path $extractPath)) {",
          "          New-Item $extractPath -ItemType Directory | Out-Null",
          "        }",
          "      } else {",
          "        $parentPath = Split-Path $extractPath",
          "        if (-not (Test-Path $parentPath)) {",
          "          New-Item $parentPath -ItemType Directory | Out-Null",
          "        }",
          "          [System.IO.Compression.ZipFileExtensions]::ExtractToFile($item, $extractPath, $true)",
          "      }",
          "    }",
          "  } catch {",
          "    Write-Host ('Error encountered when extracting module file: {0}.' -f $_.Exception.Message)",
          "    Exit -1",
          "  } finally {",
          "    $zip.Dispose()",
          "  }",
          "}",
          "",
          "function Invoke-RunSysprep {",
          "  Import-Module $moduleManifestPath",
          "  $command = 'Start-AwsUwiSysprep'",
          "  if($id) { $command += \" -Id $($id)\"}",
          "  Invoke-Expression $command",
          "}",
          "",
          "Main"
        ]
      }
    }
  ]
}
