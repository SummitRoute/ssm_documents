{
  "schemaVersion": "0.3",
  "description": "Collects troubleshooting logs from the Operating System, and uploads them to an S3 bucket in your account.",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "InstanceId": {
      "type": "String",
      "description": "(Required) The ID of the Windows or Linux managed instance you want to collect logs from.",
      "allowedPattern": "^[m]{0,1}i-[a-z0-9]{8,17}$"
    },
    "S3BucketName": {
      "type": "String",
      "description": "(Required) S3 bucket to upload the logs to.",
      "allowedPattern": "^[_a-zA-Z0-9][-._a-zA-Z0-9]{2,62}$"
    },
    "S3Path": {
      "type": "String",
      "description": "(Required) S3 path for the collected logs.",
      "default": "AWSSupport-SendLogBundleToS3Bucket/",
      "allowedPattern": "^[a-zA-Z0-9][-./a-zA-Z0-9]{0,255}/$"
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Optional) The IAM role for this execution. If no role is specified, AWS Systems Manager Automation will use the permissions of the user that executes this document.",
      "default": ""
    }
  },
  "mainSteps": [
    {
      "name": "assertInstanceIsManagedInstance",
      "action": "aws:assertAwsResourceProperty",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ssm",
        "Api": "DescribeInstanceInformation",
        "InstanceInformationFilterList": [
          {
            "key": "InstanceIds",
            "valueSet": [
              "{{ InstanceId }}"
            ]
          }
        ],
        "PropertySelector": "$.InstanceInformationList[0].PingStatus",
        "DesiredValues": [
          "Online"
        ]
      },
      "isCritical": "true",
      "nextStep": "describeManagedInstance"
    },
    {
      "name": "describeManagedInstance",
      "action": "aws:executeAwsApi",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ssm",
        "Api": "DescribeInstanceInformation",
        "InstanceInformationFilterList": [
          {
            "key": "InstanceIds",
            "valueSet": [
              "{{ InstanceId }}"
            ]
          }
        ]
      },
      "outputs": [
        {
          "Name": "Platform",
          "Selector": "$.InstanceInformationList[0].PlatformType"
        }
      ],
      "isCritical": "true",
      "nextStep": "branchOnManagedInstancePlatform"
    },
    {
      "name": "branchOnManagedInstancePlatform",
      "action": "aws:branch",
      "onFailure": "Abort",
      "inputs": {
        "Choices": [
          {
            "NextStep": "installEC2RescueForWindows",
            "Variable": "{{ describeManagedInstance.Platform }}",
            "StringEquals": "Windows"
          },
          {
            "NextStep": "installEC2RescueForLinux",
            "Variable": "{{ describeManagedInstance.Platform }}",
            "StringEquals": "Linux"
          }
        ]
      },
      "isCritical": "true",
      "isEnd": "true"
    },
    {
      "name": "installEC2RescueForWindows",
      "action": "aws:runCommand",
      "onFailure": "Abort",
      "inputs": {
        "DocumentName": "AWS-ConfigureAWSPackage",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "name": "AWSSupport-EC2Rescue",
          "action": "Install",
          "version": "latest"
        }
      },
      "isCritical": "true",
      "nextStep": "collectAndUploadWindowsLogBundle"
    },
    {
      "name": "collectAndUploadWindowsLogBundle",
      "action": "aws:runCommand",
      "onFailure": "Abort",
      "inputs": {
        "DocumentName": "AWS-RunPowerShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "try{ ",
            "    if(Get-Module -ListAvailable -Name AWSPowershell){ ",
            "        Import-Module AWSPowershell, EC2Rescue ",
            "        $s3BucketName = \"{{ S3BucketName }}\" ",
            "        $s3Path = \"{{ S3Path }}\" ",
            "        if(Test-S3Bucket -BucketName $s3BucketName){ ",
            "            Write-Host \"Collecting logs from the current Windows instance.\" ",
            "            $logFile = Invoke-EC2RescueCollectLogBundle -Logs \"all\"  ",
            "            Write-Host \"Log collection completed. Uploading logs to S3 bucket ${s3BucketName} under path ${s3Path}.\" ",
            "            Copy-EC2RescueLogBundleToS3 -FilePath $logFile -S3BucketName $s3BucketName -S3Path $s3Path ",
            "            Write-Host \"Log upload completed.\" ",
            "        }else{ ",
            "            throw (\"No S3 bucket called \" + $s3BucketName + \" found in the current AWS account, or access denied. Please specify an S3 bucket you own, and that this instance has access to.\") ",
            "        } ",
            "    }else{ ",
            "        Write-Host \"AWS Tools for Windows PowerShell not installed. Please install the latest version of the AWS Tools for Windows PowerShell and try again.\" ",
            "        Write-Host \"Download location: https://aws.amazon.com/powershell/\" ",
            "        Exit 255 ",
            "    } ",
            "}catch{ ",
            "    Write-Host $_.Exception.Message ",
            "    Exit 1 ",
            "}"
          ]
        }
      },
      "isCritical": "true",
      "isEnd": "true"
    },
    {
      "name": "installEC2RescueForLinux",
      "action": "aws:runCommand",
      "onFailure": "Abort",
      "inputs": {
        "DocumentName": "AWS-ConfigureAWSPackage",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "name": "AWSSupport-EC2Rescue",
          "action": "Install",
          "version": "latest"
        }
      },
      "isCritical": "true",
      "nextStep": "collectAndUploadLinuxLogBundle"
    },
    {
      "name": "collectAndUploadLinuxLogBundle",
      "action": "aws:runCommand",
      "onFailure": "Abort",
      "inputs": {
        "DocumentName": "AWS-RunShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "#!/bin/sh ",
            "error_trap() ",
            "{ ",
            "    if test -n \"$1\" ; then ",
            "        printf \"%s\\\\n\" \"$1\" ",
            "    fi ",
            "    printf \"%.s=\" $(seq 1 80) ",
            "    printf \"\\\\nThe EC2Rescue execution did not complete successfully.\\\\n\" ",
            "    exit 1 ",
            "} ",
            " ",
            "# Make sure the bucket is accessible before running EC2RL ",
            "aws s3api head-bucket --bucket {{ S3BucketName }} || error_trap \"No S3 bucket called {{ S3BucketName }} found in the current AWS account or access denied. Please specify an S3 bucket you own and that this instance has access to.\" ",
            " ",
            "# Check that a compatible Python interpreter is available ",
            "if command -v python3 ; then ",
            "    PYTHON=python3 ",
            "elif command -v python2.7 ; then ",
            "    PYTHON=python2.7 ",
            "else ",
            "    error_trap \"Failed to find compatible Python environment!\" ",
            "fi ",
            " ",
            "# Use the Managed Instance ID if available ",
            "if test -f /var/lib/amazon/ssm/registration ; then ",
            "    INSTANCE_ID=\"$(${PYTHON} -c \"import json, sys; print(json.load(sys.stdin)['ManagedInstanceID'])\" < /var/lib/amazon/ssm/registration)\" || error_trap ",
            "# If SSM is being used on an EC2 instance without an activation (e.g. via role) then use the Instance ID ",
            "elif test -e /sys/hypervisor/uuid && grep -q \"^ec2\" /sys/hypervisor/uuid ; then ",
            "    INSTANCE_ID=\"$(curl -s \"http://169.254.169.254/latest/meta-data/instance-id\")\" || error_trap ",
            "elif test \"$(curl -s -o /dev/null -w \"%{http_code}\" http://169.254.169.254/latest/dynamic/instance-identity/document)\" == 200; then ",
            "    INSTANCE_ID=\"$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | ${PYTHON} -c 'import json, sys; print(json.load(sys.stdin)[\"instanceId\"])')\" || error_trap ",
            "else ",
            "    error_trap \"Failed to obtain an instance ID\" ",
            "fi ",
            " ",
            "# Determine if the system is an instance ",
            "# This Python snippet is from EC2 Rescue for Linux: ec2rlcore.prediag.is_an_instance() ",
            "if test \"$(${PYTHON} -c \" ",
            "try: ",
            "    with open('/sys/hypervisor/uuid') as uuid_file: ",
            "        if not uuid_file.readline().startswith('ec2'): ",
            "            print(False) ",
            "    print(True) ",
            "except (IOError, OSError): ",
            "    # Python2: IOError ",
            "    # Python3: OSError -> FileNotFoundError ",
            "    print(False) ",
            "\")\" != \"True\" ; then ",
            "    NOT_AN_INSTANCE=\"--not-an-instance\" ",
            "else ",
            "    NOT_AN_INSTANCE=\"\" ",
            "fi ",
            " ",
            "printf \"Running EC2 Rescue for Linux\\\\n\" ",
            "sudo ec2rl run ${NOT_AN_INSTANCE} --only-classes=collect,gather --times=3 --period=5 --domain=amazon.com --protocol=tcp --count=3 --destination=amazon.com --port=80 || error_trap ",
            " ",
            "LOG_DIR=\"$(basename \"$(find /var/tmp/ec2rl -maxdepth 1 -mindepth 1 -printf \"%T+ %p\\\\n\" | sort -r | head -n 1 | awk '{print $2}')\")\" ",
            "FILE_NAME=\"$(date --iso-8601=seconds | sed \"s/\\\\:/_/g\")\"_\"${INSTANCE_ID}\".tgz ",
            "printf \"Creating tarball ${FILE_NAME}, of EC2RL log directory, /var/tmp/ec2rl/%s\\\\n\" \"${LOG_DIR}\" ",
            "tar -czf \"${FILE_NAME}\" -C /var/tmp/ec2rl \"${LOG_DIR}\" || error_trap ",
            "printf \"Uploading tarball to s3://{{ S3BucketName }}/{{ S3Path }}%s\\\\n\" \"${FILE_NAME}\" ",
            "aws s3 cp \"$FILE_NAME\" s3://{{ S3BucketName }}/{{ S3Path }}\"${FILE_NAME}\"  || error_trap ",
            "printf \"Done!\\\\n\" "
          ]
        }
      },
      "isCritical": "true",
      "isEnd": "true"
    }
  ],
  "outputs": [
    "collectAndUploadWindowsLogBundle.Output",
    "collectAndUploadLinuxLogBundle.Output"
  ]
}
