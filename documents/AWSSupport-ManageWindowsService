{
  "schemaVersion": "0.3",
  "description": "The AWSSupport-ManageWindowsService automation document enables a user to stop, start, restart, pause, or disable any Windows service on the target instance.",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "InstanceId": {
      "type": "String",
      "description": "(Required) The ID of the managed instance to manage the RDP settings of.",
      "allowedPattern": "^[m]{0,1}i-[a-z0-9]{8,17}$"
    },
    "WindowsServiceName": {
      "type": "String",
      "description": "(Required) A valid Windows service name."
    },
    "StartupType": {
      "type": "String",
      "description": "(Required) A startup type to apply to the Windows service: Auto, Demand (Manual), Disabled, DelayAutoStart, Check.",
      "default": "Check",
      "allowedValues": [
        "Check",
        "Auto",
        "Demand",
        "Disabled",
        "DelayedAutoStart"
      ]
    },
    "ServiceAction": {
      "type": "String",
      "description": "(Required) An action to apply to the Windows service: Restart, Force-Restart, Start, Stop, Force-Stop, Pause, Check. Note: Force-Restart and Force-Stop can be used to restart and to stop a service that has dependent services.",
      "default": "Check",
      "allowedValues": [
        "Check",
        "Restart",
        "Force-Restart",
        "Start",
        "Stop",
        "Force-Stop",
        "Pause"
      ]
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Optional) The IAM role for this execution. If no role is specified, AWS Systems Manager Automation will use the permissions of the user that executes this document.",
      "default": ""
    }
  },
  "mainSteps": [
    {
      "name": "assertInstanceIsWindows",
      "action": "aws:assertAwsResourceProperty",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstances",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "PropertySelector": "$.Reservations[0].Instances[0].Platform",
        "DesiredValues": [
          "windows"
        ]
      },
      "isCritical": "true",
      "nextStep": "assertInstanceIsManagedInstance"
    },
    {
      "name": "assertInstanceIsManagedInstance",
      "action": "aws:assertAwsResourceProperty",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ssm",
        "Api": "DescribeInstanceInformation",
        "InstanceInformationFilterList": [
          {
            "key": "InstanceIds",
            "valueSet": [
              "{{ InstanceId }}"
            ]
          }
        ],
        "PropertySelector": "$.InstanceInformationList[0].PingStatus",
        "DesiredValues": [
          "Online"
        ]
      },
      "isCritical": "true",
      "nextStep": "manageWindowsService"
    },
    {
      "name": "manageWindowsService",
      "action": "aws:runCommand",
      "onFailure": "Abort",
      "inputs": {
        "DocumentName": "AWS-RunPowerShellScript",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "Parameters": {
          "commands": [
            "Function Get-ServiceStatus {",
            "    Param (",
            "        [Parameter(Mandatory = $true)]",
            "        [String]$ServiceName",
            "    )",
            "",
            "    $serviceInfo = Get-WmiObject -Class Win32_Service -Filter \"Name='${ServiceName}'\"",
            "       ",
            "    if ($serviceInfo) {",
            "   ",
            "        return $serviceInfo.State",
            "",
            "    }",
            "    else {",
            "        ",
            "        throw \"Service $ServiceName does not exist.\"",
            "        ",
            "    } ",
            "   ",
            "}",
            "",
            "Function Get-ServiceStartupType {  ",
            "    Param (",
            "        [Parameter(Mandatory = $true)]",
            "        [String]$ServiceName",
            "    )",
            "    ",
            "    $serviceInfo = Get-WmiObject -Class Win32_Service -Filter \"Name='${ServiceName}'\"",
            "    ",
            "    if ($serviceInfo) {",
            "            ",
            "        return $serviceInfo.StartMode",
            "    ",
            "    }",
            "    else {",
            "    ",
            "        throw \"Service $ServiceName does not exist.\"",
            "    } ",
            "",
            "}",
            "",
            "Function Set-ServiceStatus { ",
            "    Param (",
            "        [Parameter(Mandatory = $true)]",
            "        [ValidateSet(\"Start\", \"Stop\", \"Force-Stop\", \"Pause\", \"Restart\", \"Force-Restart\")] ",
            "        [String]$Status,",
            "",
            "        [Parameter(Mandatory = $true)]",
            "        [String]$ServiceName",
            "    )",
            "    ",
            "    try {",
            "",
            "        switch ($Status) {",
            "",
            "            Start {",
            "",
            "                Start-Service -Name $ServiceName -ErrorAction Stop",
            "                Write-Host \"$ServiceName was successfully started.\"",
            "",
            "            }",
            "            Stop {",
            "",
            "                Stop-Service -Name $ServiceName -ErrorAction Stop",
            "                Write-Host \"$ServiceName was successfully stopped.\"",
            "",
            "            }",
            "            Force-Stop {",
            "",
            "                Stop-Service -Name $ServiceName -Force -ErrorAction Stop",
            "                Write-Host \"$ServiceName was successfully stopped.\"",
            "",
            "            }",
            "            Pause {",
            "",
            "                Suspend-Service -Name $ServiceName -ErrorAction Stop",
            "                Write-Host \"$ServiceName was successfully paused.\"",
            "",
            "            }",
            "            Restart { ",
            "",
            "                Restart-Service -Name $ServiceName -ErrorAction Stop",
            "                Write-Host \"$ServiceName was successfully restarted.\" ",
            "",
            "            }",
            "            Force-Restart { ",
            "",
            "                Restart-Service -Name $ServiceName -Force -ErrorAction Stop",
            "                Write-Host \"$ServiceName was successfully restarted.\" ",
            "",
            "            }",
            "",
            "        }",
            "",
            "    }",
            "    catch {",
            "",
            "        throw \"Unable to set $ServiceName status to $Status. Reason: \" + $_.Exception.Message",
            "",
            "    }",
            "}",
            "",
            "Function Set-ServiceStartupType {",
            "    Param (",
            "        [Parameter(Mandatory = $true)]",
            "        [ValidateSet(\"Auto\", \"Demand\", \"Disabled\", \"DelayedAutoStart\")] ",
            "        [String]$StartupType,",
            "",
            "        [Parameter(Mandatory = $true)]",
            "        [String]$ServiceName",
            "    )",
            "",
            "    try {",
            "        ",
            "        if ($StartupType -eq \"DelayedAutoStart\") {",
            "",
            "            $result = & \"${env:SYSTEMROOT}\\system32\\sc.exe\" config $ServiceName Start= delayed-auto ",
            "            ",
            "            if ($?) {",
            "            ",
            "                Write-Host \"Startup type changed to Automatic (Delayed Start).\"",
            "            ",
            "            }",
            "            else {",
            "            ",
            "                throw($result)",
            "            ",
            "            }",
            "",
            "        }",
            "        else {",
            "            ",
            "            $result = & \"${env:SYSTEMROOT}\\system32\\sc.exe\" config $ServiceName Start= $StartupType",
            "            ",
            "            if ($?) {",
            "            ",
            "                Write-Host \"Startup type changed to $StartupType.\"",
            "            ",
            "            }",
            "            else {",
            "            ",
            "                throw($result)",
            "            ",
            "            }",
            "",
            "        }",
            "",
            "    }",
            "    catch {",
            "",
            "        throw($_.Exception.Message)",
            "",
            "    }",
            "",
            "}",
            "",
            "try {",
            "    ",
            "    $service = \"{{ WindowsServiceName }}\"",
            "    $serviceStatus = \"{{ ServiceAction }}\"",
            "    $serviceStartupType = \"{{ StartupType }}\"",
            "",
            "    if ($serviceStartupType -eq \"Check\") {",
            "",
            "        $currentServiceStartupType = Get-ServiceStartupType -ServiceName $service",
            "        Write-Host \"$service startup type: $currentServiceStartupType\"",
            "",
            "    }",
            "    else {",
            "",
            "        Set-ServiceStartupType -ServiceName $service -StartupType $serviceStartupType",
            "",
            "    }",
            "",
            "    if ($serviceStatus -eq \"Check\") {",
            "",
            "        $currentServiceStatus = Get-ServiceStatus -ServiceName $service",
            "        Write-Host \"$service status: $currentServiceStatus\"",
            "",
            "    }",
            "    else {",
            "",
            "        Set-ServiceStatus -ServiceName $service -Status $serviceStatus",
            "",
            "    }",
            "",
            "}",
            "catch {",
            "",
            "    Write-Host $_.Exception.Message",
            "    exit 1   ",
            "",
            "}"
          ]
        }
      },
      "isCritical": "true",
      "isEnd": "true"
    }
  ],
  "outputs": [
    "manageWindowsService.Output"
  ]
}
