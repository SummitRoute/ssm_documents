{
  "assumeRole": "{{ AutomationAssumeRole }}",
  "description": "Attach IAM to Instance",
  "parameters": {
    "InstanceId": {
      "type": "String",
      "description": "(Required) The ID of the instance."
    },
    "RoleName": {
      "type": "String",
      "description": "(Required) Role Name to add"
    },
    "LambdaAssumeRole": {
      "default": "",
      "type": "String",
      "description": "(Optional) The ARN of the role assumed by lambda"
    },
    "AutomationAssumeRole": {
      "default": "",
      "type": "String",
      "description": "(Optional) The ARN of the role that allows Automation to perform the actions on your behalf. "
    }
  },
  "outputs": [
    "attachIAMToInstance.LogResult",
    "attachIAMToInstance.Payload"
  ],
  "schemaVersion": "0.3",
  "mainSteps": [
    {
      "action": "aws:createStack",
      "inputs": {
        "StackName": "AttachIAMToInstanceStack{{automation:EXECUTION_ID}}",
        "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nConditions:\n  LambdaAssumeRoleNotSpecified:\n    Fn::Or:\n    - Fn::Equals:\n      - {Ref: LambdaRoleArn}\n      - ''\n    - Fn::Equals:\n      - {Ref: LambdaRoleArn}\n      - undefined\nParameters:\n  LambdaName: {Description: 'The lambda function name\n\n      ', Type: String}\n  LambdaRoleArn: {Default: '', Description: 'The ARN of the role that allows Lambda\n      created by Automation to perform the action on your behalf\n\n      ', Type: String}\nResources:\n  AttachIAMToInstanceLambda:\n    Properties:\n      Code: {ZipFile: \"import boto3\\nimport time\\nimport logging\\n\\nlogger = logging.getLogger()\\n\\\n          logger.setLevel(logging.INFO)\\n\\niam_client = boto3.client('iam')\\nec2_client\\\n          \\ = boto3.client('ec2')\\n\\n\\ndef find_or_create_instance_profile(role_name):\\n\\\n          \\tresponse = iam_client.list_instance_profiles_for_role(RoleName=role_name)\\n\\\n          \\tif len(response['InstanceProfiles']) != 0:\\n\\t\\tlogger.info(\\\"Instance\\\n          \\ profile with role \\\" + role_name + \\\" already exists\\\")\\n\\t\\tinstance_profile\\\n          \\ = response['InstanceProfiles'][0]\\n\\telse:\\n\\t\\tlogger.info(\\\"Creating\\\n          \\ instance profile for role \\\" + role_name)\\n\\t\\tresponse = iam_client.create_instance_profile(\\n\\\n          \\t\\t\\tInstanceProfileName=role_name,\\n\\t\\t\\tPath='/'\\n\\t\\t)\\n\\t\\tinstance_profile\\\n          \\ = response['InstanceProfile']\\n\\n\\t\\t# Now assign the role to the profile\\n\\\n          \\t\\tiam_client.add_role_to_instance_profile(\\n\\t\\t\\tInstanceProfileName=instance_profile['InstanceProfileName'],\\n\\\n          \\t\\t\\tRoleName=role_name\\n\\t\\t)\\n\\n\\treturn {\\n\\t\\t'InstanceProfileName':\\\n          \\ instance_profile['InstanceProfileName'],\\n\\t\\t'Arn': instance_profile['Arn']\\n\\\n          \\t}\\n\\n\\ndef associate_instance_profile(profile_name, profile_arn, instance_id):\\n\\\n          \\tlogger.info(\\\"Associating instance profile: \\\" + profile_name + \\\" to\\\n          \\ \\\" + instance_id)\\n\\t# For whatever reason, new instance profiles are\\\n          \\ not available immediately. So we try again\\n\\tretry_count = 6\\n\\twhile\\\n          \\ True:\\n\\t\\ttry:\\n\\t\\t\\treturn ec2_client.associate_iam_instance_profile(\\n\\\n          \\t\\t\\t\\tIamInstanceProfile={\\n\\t\\t\\t\\t\\t'Arn': profile_arn,\\n\\t\\t\\t\\t\\t\\\n          'Name': profile_name\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tInstanceId=instance_id\\n\\t\\t\\t\\\n          )\\n\\t\\texcept Exception as e:\\n\\t\\t\\tretry_count -= 1\\n\\t\\t\\tif retry_count\\\n          \\ == 0:\\n\\t\\t\\t\\traise e\\n\\n\\t\\t\\tlogger.info(\\\"Unable to associate instance\\\n          \\ profile... trying again in 10 sec\\\")\\n\\t\\t\\ttime.sleep(10)\\n\\n\\ndef handler(event,\\\n          \\ context):\\n\\tinstance_id = event['InstanceId']\\n\\trole_name = event['RoleName']\\n\\\n          \\n\\tresponse = ec2_client.describe_iam_instance_profile_associations(Filters=[{\\n\\\n          \\t\\t'Name': 'instance-id',\\n\\t\\t'Values': [instance_id]\\n\\t}])\\n\\n\\tif len(response['IamInstanceProfileAssociations'])\\\n          \\ != 0:\\n\\t\\tlogger.info(\\\"Instance Profile already exists. Will attach\\\n          \\ role to existing instance profile\\\")\\n\\n\\t\\tiam_instance_profile_association\\\n          \\ = response['IamInstanceProfileAssociations'][0]\\n\\t\\tassociation_id =\\\n          \\ iam_instance_profile_association['AssociationId']\\n\\t\\tec2_client.disassociate_iam_instance_profile(AssociationId=association_id)\\n\\\n          \\n\\tinstance_profile = find_or_create_instance_profile(role_name)\\n\\tassociation_response\\\n          \\ = associate_instance_profile(instance_profile['InstanceProfileName'],\\\n          \\ instance_profile['Arn'],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  instance_id)\\n\\t\\\n          association_id = association_response['IamInstanceProfileAssociation']['AssociationId']\\n\\\n          \\n\\treturn {\\n\\t\\t\\\"InstanceProfileName\\\": instance_profile['InstanceProfileName'],\\n\\\n          \\t\\t\\\"Arn\\\": instance_profile['Arn'],\\n\\t\\t\\\"RoleName\\\": event['RoleName'],\\n\\\n          \\t\\t\\\"AssociationId\\\": association_id\\n\\t}\\n\"}\n      FunctionName: {Ref: LambdaName}\n      Handler: index.handler\n      MemorySize: 128\n      Role:\n        Fn::If:\n        - LambdaAssumeRoleNotSpecified\n        - Fn::GetAtt: [LambdaRole, Arn]\n        - {Ref: LambdaRoleArn}\n      Runtime: python2.7\n      Timeout: 60\n    Type: AWS::Lambda::Function\n  LambdaRole:\n    Condition: LambdaAssumeRoleNotSpecified\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n        - Action: ['sts:AssumeRole']\n          Effect: Allow\n          Principal:\n            Service: [lambda.amazonaws.com]\n        Version: '2012-10-17'\n      Path: /\n      Policies:\n      - PolicyDocument:\n          Statement:\n            Action: ['ec2:AssociateIamInstanceProfile', 'ec2:DescribeIamInstanceProfileAssociations',\n              'ec2:DisassociateIamInstanceProfile', 'iam:AddRoleToInstanceProfile',\n              'iam:CreateInstanceProfile', 'iam:ListInstanceProfilesForRole', 'iam:PassRole']\n            Effect: Allow\n            Resource: '*'\n          Version: '2012-10-17'\n        PolicyName: AttachIAMToInstanceLambdaPolicy\n    Type: AWS::IAM::Role\n",
        "Parameters": [
          {
            "ParameterValue": "{{LambdaAssumeRole}}",
            "ParameterKey": "LambdaRoleArn"
          },
          {
            "ParameterValue": "AttachIAMToInstanceLambda-{{automation:EXECUTION_ID}}",
            "ParameterKey": "LambdaName"
          }
        ],
        "Capabilities": [
          "CAPABILITY_IAM"
        ]
      },
      "name": "createDocumentStack"
    },
    {
      "action": "aws:invokeLambdaFunction",
      "inputs": {
        "LogType": "Tail",
        "FunctionName": "AttachIAMToInstanceLambda-{{automation:EXECUTION_ID}}",
        "Payload": "{\"InstanceId\": \"{{InstanceId}}\", \"RoleName\": \"{{RoleName}}\"}"
      },
      "name": "attachIAMToInstance"
    },
    {
      "action": "aws:deleteStack",
      "inputs": {
        "StackName": "AttachIAMToInstanceStack{{automation:EXECUTION_ID}}"
      },
      "name": "deleteCloudFormationTemplate"
    }
  ]
}
