{
  "schemaVersion": "1.2",
  "description": "Install Microsoft Windows updates.",
  "parameters": {
    "UpdateLevel": {
      "type": "String",
      "default": "Important",
      "description": "Choose one â€” Important: Install updates classified as Important by Windows Update. Optional: Install updates classified as Optional by Windows Update. All: Install all missing Windows updates applicable to this instance.",
      "allowedValues": [
        "None",
        "All",
        "Important",
        "Optional"
      ]
    },
    "ExcludeKbArticleIds": {
      "type": "String",
      "default": "",
      "description": "(Optional) Specify one or more Microsoft Knowledge Base (KB) article IDs to exclude from the installation. You can specify multiple IDs using comma-separated values. Valid formats: KB9876543 or 9876543.",
      "allowedPattern": "(^$)|^((KB){0,1}[0-9]{1,7})(,((KB){0,1}[0-9]{1,7}))*$"
    }
  },
  "runtimeConfig": {
    "aws:runPowerShellScript": {
      "properties": [
        {
          "id": "0.aws:runPowerShellScript",
          "timeoutSeconds": 14400,
          "runCommand": [
            "# Check backward compatiability first with OS, Ec2Config and/or SSMAgent version",
            "if ([Environment]::OSVersion.Version.Major -le 5) {",
            "    Write-Error \"This command is not supported on Windows 2003 or lower.\"",
            "    exit -1",
            "} elseif ([Environment]::OSVersion.Version -ge \"10.0\") {",
            "    $ssmAgentService = Get-ItemProperty \"HKLM:SYSTEM\\CurrentControlSet\\Services\\AmazonSSMAgent\"",
            "    $sku = (Get-CimInstance -ClassName Win32_OperatingSystem).OperatingSystemSKU",
            "    if ($sku -eq 143 -or $sku -eq 144) {",
            "        Write-Host \"This command is not supported on Windows 2016 Nano Server.\"",
            "        exit -1",
            "    } elseif (-not $ssmAgentService -or $ssmAgentService.Version -le \"1.2.371.0\") {",
            "        Write-Host \"This command is not supported with SSM Agent 1.2.371 or lower on Windows 2016.\"",
            "        exit -1",
            "    }",
            "} else {",
            "    $minVersion = New-Object System.Version('3.14.786')",
            "    $ec2Config = 'C:\\Program Files\\Amazon\\Ec2ConfigService\\Ec2Config.exe'",
            "    $ec2ConfigVersion = New-Object System.Version([System.Diagnostics.FileVersionInfo]::GetVersionInfo($ec2Config).FileVersion)",
            "    if ($ec2ConfigVersion.CompareTo($minVersion) -lt 0) {",
            "        Write-Error (\"This command requires EC2Config version {0} or higher. Please run the command AWS-UpdateEC2Config to update EC2Config and try again.\" -f $minVersion.ToString())",
            "        exit -1",
            "    }",
            "}",
            "",
            "$appName = 'PatchNow'",
            "$appNamePath = $appName.ToLower() + '/'",
            "$psModuleFileName = 'Amazon.PatchNow.dll'",
            "$s3FileName = 'Amazon.PatchNow-1.0.zip'",
            "$s3Location = 'https://s3{0}.amazonaws.com/aws-ssm-{1}/' + $appName.ToLower() + '/' + $s3FileName",
            "$s3FileHash = 'ed09ae7c6085cdfaa7eb11b0dfff5a69e7c9af2f576b8db6725e9363a449321a'",
            "$psModuleFileHash = 'cf45d68c31e78de50c3b821e85fd068789c92d6edc316837d2d9e50aa5ddebac'",
            "$metadataLocation = 'http://169.254.169.254/latest/dynamic/instance-identity/document/region'",
            "$tempDirectory = $env:TEMP",
            "$downloadPath = [IO.Path]::Combine($tempDirectory, $s3FileName)",
            "$psModuleInstallLocation = [IO.Path]::Combine([Environment]::GetEnvironmentVariable([Environment+SpecialFolder]::ProgramFiles), 'Amazon', $appName)",
            "$psModuleInstallFile = [IO.Path]::Combine($psModuleInstallLocation, $psModuleFileName)",
            "$log = @()",
            "",
            "function ExtractZipCoreOs ([string]$zipFilePath, [string]$destPath) {",
            "    try",
            "    {",
            "        [System.Reflection.Assembly]::LoadWithPartialName(\"System.IO.Compression.FileSystem\") | Out-Null",
            "",
            "        $zip = [System.IO.Compression.ZipFile]::OpenRead($zipFilePath)",
            "",
            "        foreach ($item in $zip.Entries) {",
            "            $extractedPath = Join-Path $destPath $item.FullName",
            "",
            "            if ($item.Length -eq 0) {",
            "                if ((Test-Path $extractedPath) -eq 0) {",
            "                    mkdir $extractedPath | Out-Null",
            "                }",
            "            } else {",
            "                $fileParent = Split-Path $extractedPath",
            "",
            "                if ((Test-Path $fileParent) -eq 0) {",
            "                    mkdir $fileParent | Out-Null",
            "                }",
            "",
            "                [System.IO.Compression.ZipFileExtensions]::ExtractToFile($item,(Join-Path -Path $fileParent -ChildPath $item.FullName), $true)",
            "            }",
            "        }",
            "    } ",
            "    catch",
            "    {",
            "        throw \"Error encountered when extracting PatchNow zip file.`n$($_.Exception.Message)\"",
            "    }",
            "    finally",
            "    {",
            "        $zip.Dispose()",
            "    }",
            "}",
            "",
            "function RunModule {",
            "    Import-Module $psModuleInstallFile",
            "",
            "    $cmd = 'Install-WindowsUpdates -UpdateLevel ' + '{{ UpdateLevel }}'",
            "    $kbs = '{{ ExcludeKbArticleIds }}'.Trim()",
            "",
            "    if ($kbs) {",
            "        $cmd = $cmd + ' -ExcludeKbArticleIds ' + (ProcessKbList $kbs)",
            "    }",
            "",
            "    $response = iex $cmd",
            "",
            "    if ($response.ExitCode -ne 3010)",
            "    {",
            "        $response.Report",
            "        $response.Summary.ImportantUpdates",
            "        $response.Summary.OptionalUpdates",
            "    }",
            "",
            "    exit $response.ExitCode",
            "}",
            "",
            "function ProcessKbList ($kbs) {",
            "    $delim = (',',';',' ','|')",
            "    $values = ($kbs -split {$delim -contains $_}) | ForEach-Object { $_.Trim() } | Where-Object { $_ -ne '' }",
            "",
            "    return ($values -join ',')",
            "}",
            "",
            "function CheckFileHash ($filePath, $fileHash) {",
            "    if (Test-Path($filePath)) {",
            "        $fileStream = New-Object System.IO.FileStream($filePath, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read)",
            "        $sha256 = [System.Security.Cryptography.HashAlgorithm]::Create('System.Security.Cryptography.SHA256CryptoServiceProvider')",
            "        $sourceHash = [System.BitConverter]::ToString($sha256.ComputeHash($fileStream), 0).Replace('-', '').ToLowerInvariant()",
            "        $sha256.Dispose()",
            "        $fileStream.Dispose()",
            "        ",
            "        if ($sourceHash -ne $fileHash) {",
            "            return $false",
            "        }",
            "        else {",
            "            return $true",
            "        }",
            "    }",
            "    else {",
            "        return $false",
            "    }",
            "}",
            "function GetRegion {",
            "    try {",
            "        $log += \"Obtaining instance region from SSM agent or instance metadata.`r`n\"",
            "        $region = $env:AWS_SSM_REGION_NAME",
            "",
            "        if ($region -eq $null) { ",
            "            $metadataUrl = 'http://169.254.169.254/latest/dynamic/instance-identity/document'",
            "            $region = ((Invoke-WebRequest -UseBasicParsing -uri $metadataUrl).Content | ConvertFrom-Json).region",
            "        }",
            "",
            "        if (($region -eq $null) -or ($region -eq '')) {",
            "            throw \"Region could not be determined from agent environment variable or metadata.\"",
            "        }",
            "",
            "        $region",
            "    } catch {",
            "        throw \"An error occurred while determining the region.`n$($_.Exception.Message)\"",
            "    }",
            "} ",
            "function GetS3DownloadUrl ([string]$appPath, [string]$fileVersion) {",
            "    $region = GetRegion",
            "",
            "    if ($region.StartsWith('cn-')) {",
            "        # China endpoint",
            "        $s3PrefixUrl = 'https://s3.{0}.amazonaws.com.cn/aws-ssm-{0}/'",
            "    } elseif ($region.StartsWith('us-gov')) {",
            "        # GovCloud endpoint",
            "        $s3PrefixUrl = 'https://s3-fips-{0}.amazonaws.com/aws-ssm-{0}/'",
            "    } else {",
            "        # Public AWS endpoint",
            "        $s3PrefixUrl = 'https://s3.dualstack.{0}.amazonaws.com/aws-ssm-{0}/'",
            "    }",
            "",
            "    $s3Location = ($s3PrefixUrl + $appPath + $fileVersion) -f $region",
            "    $s3Location",
            "}",
            "",
            "function PrepareToRunModule {",
            "    try {",
            "        $isInstalled = $false",
            "",
            "        if (-Not (CheckFileHash $psModuleInstallFile $psModuleFileHash)) {",
            "            try {",
            "                $log += (\"Preparing to download {0} PowerShell module from S3.`r`n\" -f $appName)",
            "                $s3Location = GetS3DownloadUrl $appNamePath $s3FileName",
            "",
            "                if (-Not (Test-Path($psModuleInstallLocation))) {",
            "                    $noOp = New-Item $psModuleInstallLocation -ItemType Directory",
            "                }",
            "",
            "                if (-Not (Test-Path($tempDirectory))) {",
            "                    $noOp = New-Item $tempDirectory -ItemType Directory",
            "                }",
            "",
            "                $log += (\"Downloading {0} PowerShell module from {1} to {2}.`r`n\" -f $appName, $s3Location, $downloadPath)",
            "                Start-BitsTransfer -Source $s3Location -Destination $downloadPath",
            "",
            "                if (CheckFileHash $downloadPath $s3FileHash ) {",
            "                    $log += (\"Extracting {0} zip file contents to temporary folder.`r`n\" -f $appName)",
            "                    try {",
            "                        (New-Object -Com Shell.Application).namespace($psModuleInstallLocation).CopyHere((New-Object -Com Shell.Application).namespace($downloadPath).Items(), 16)",
            "                    } catch [Exception] {",
            "                        ExtractZipCoreOs $downloadPath $psModuleInstallLocation",
            "                    }",
            "                }",
            "                else {",
            "                    throw ('The SHA hash of the {0} S3 source file does not match the expected value.' -f $appName)",
            "                }",
            "            } catch [Exception] {",
            "                $exceptionMessage = 'Exception thrown while downloading {0} PowerShell module with message: {1}' -f $appName, $_.Exception.Message",
            "                throw $exceptionMessage",
            "            }",
            "",
            "            $log += (\"Verifying SHA 256 of the {0} PowerShell module.`r`n\" -f $appName)",
            "            if (CheckFileHash $psModuleInstallFile $psModuleFileHash) {",
            "                $log += (\"Successfully downloaded and installed the {0} PowerShell module.`r`n\" -f $appName)",
            "            }",
            "            else {",
            "                throw ('The SHA hash of the {0} PowerShell module does not match the expected value.' -f $appName)",
            "            }",
            "        }",
            "    }",
            "    catch [Exception] {",
            "        $msg = \"An error occurred when executing {0}: {1}`r`nDetails:`r`n{2}\" -f $appName, $_.Exception.Message, $log",
            "        Write-Error $msg",
            "    ",
            "        exit -1",
            "    }",
            "    finally {",
            "        if (Test-Path $downloadPath) {",
            "            rm $downloadPath",
            "        }",
            "    }",
            "}",
            "",
            "# Run the script",
            "PrepareToRunModule",
            "RunModule"
          ]
        }
      ]
    }
  }
}
