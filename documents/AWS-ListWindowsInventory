{
  "schemaVersion": "1.2",
  "description": "List information about the operating system, installed applications, or installed updates. We recommend exporting results to an Amazon S3 bucket. Output can exceed the maximum.",
  "parameters": {
    "ListOSInformation": {
      "type": "String",
      "default": "true",
      "description": "(Optional) Lists information about the operating system. Default is true.",
      "allowedValues": [
        "true",
        "false"
      ]
    },
    "ListInstalledApplications": {
      "type": "String",
      "default": "false",
      "description": "(Optional) Lists applications installed on the instance. Default is false.",
      "allowedValues": [
        "true",
        "false"
      ]
    },
    "ListInstalledUpdates": {
      "type": "String",
      "default": "false",
      "description": "(Optional) Lists operating system updates installed on the instance. Default is false.",
      "allowedValues": [
        "true",
        "false"
      ]
    }
  },
  "runtimeConfig": {
    "aws:runPowerShellScript": {
      "properties": [
        {
          "id": "0.aws:runPowerShellScript",
          "runCommand": [
            "<#",
            ".Synopsis",
            "  A generic script for setting up regional access, downloading,",
            "  signature verification, installing, and running a PowerShell ",
            "  module from Run Command.",
            " ",
            ".Description",
            "  1. Customize the variables in the script to align with the target module configuration.",
            "  2. Implement the RunModule function to call and return from the target operation.",
            "",
            ".Notes",
            "  File hashes are verified using SHA256. ",
            "#>",
            "",
            "",
            "# Check OS version supports installation script before beginning. ",
            "if ([environment]::OSVersion.Version.Major -le 5) {",
            "    Write-Error \"The Inventory command does not support Windows 2003. Machine must be Windows 2008 or higher.\"",
            "    exit -1",
            "}",
            "elseif ([Environment]::OSVersion.Version -ge \"10.0\") {",
            "    $sku = (Get-CimInstance -ClassName Win32_OperatingSystem).OperatingSystemSKU",
            "    if ($sku -eq 143 -or $sku -eq 144) {",
            "        Write-Host \"This command is not supported on Windows 2016 Nano Server.\"",
            "        exit -1",
            "    }",
            "}",
            "",
            "$appName = 'Inventory'",
            "$psModuleFileName = 'inventory.psm1'",
            "$s3FileName = 'AWS-ListWindowsInventory-1.1.zip'",
            "$s3Location = 'https://s3{0}.amazonaws.com/aws-ssm-{1}/inventory/' + $s3FileName",
            "$s3FileHash = '7062DA68B82E9E952659FE803AE87E9942C975B80FFA7D1B464E326E2D1FF484'",
            "$psModuleFileHash = '68D46469CA6D7C235AE4813467DBDA0014E7DE49694AB6215281EC3C202D0F87'",
            "$psModuleInstallLocation = [IO.Path]::Combine([Environment]::GetEnvironmentVariable([Environment+SpecialFolder]::ProgramFiles), 'Amazon', $appName)",
            "$psModuleInstallFile = [IO.Path]::Combine($psModuleInstallLocation, $psModuleFileName)",
            "$log = @()",
            "",
            "function ExtractZipCoreOs ([string]$zipFilePath, [string]$destPath) {",
            "    try",
            "    {",
            "        [System.Reflection.Assembly]::LoadWithPartialName(\"System.IO.Compression.FileSystem\") | Out-Null",
            "",
            "        $zip = [System.IO.Compression.ZipFile]::OpenRead($zipFilePath)",
            "",
            "        foreach ($item in $zip.Entries) {",
            "            $extractedPath = Join-Path $destPath $item.FullName",
            "",
            "            if ($item.Length -eq 0) {",
            "                if ((Test-Path $extractedPath) -eq 0) {",
            "                    mkdir $extractedPath | Out-Null",
            "                }",
            "            } else {",
            "                $fileParent = Split-Path $extractedPath",
            "",
            "                if ((Test-Path $fileParent) -eq 0) {",
            "                    mkdir $fileParent | Out-Null",
            "                }",
            "",
            "                [System.IO.Compression.ZipFileExtensions]::ExtractToFile($item,(Join-Path -Path $fileParent -ChildPath $item.FullName), $true)",
            "            }",
            "        }",
            "    } ",
            "    catch",
            "    {",
            "        throw \"Error encountered when extracting Inventory zip file.`n$($_.Exception.Message)\"",
            "    }",
            "    finally",
            "    {",
            "        $zip.Dispose()",
            "    }",
            "}",
            "",
            "function RunModule {",
            "    Import-Module $psModuleInstallFile",
            "",
            "    try {",
            "    ",
            "      if ('{{ ListOSInformation }}' -eq 'true') {",
            "        Get-OSInventory",
            "      }",
            "",
            "      if ('{{ ListInstalledApplications }}' -eq 'true') {",
            "        Get-AppInventory",
            "      }",
            "",
            "      if ('{{ ListInstalledUpdates }}' -eq 'true') {",
            "        Get-PatchInventory",
            "      }",
            "    } catch {",
            "      $exceptionMessage = 'Exception thrown while getting system inventory: {0}' -f $_.Exception.Message ",
            "      Write-Error $exceptionMessage",
            "      exit 1",
            "    }",
            "",
            "}",
            "",
            "",
            "function CheckFileHash ($filePath, $fileHash) {",
            "    if (Test-Path($filePath)) {",
            "        $fileStream = New-Object System.IO.FileStream($filePath, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read)",
            "        $sha256 = [System.Security.Cryptography.HashAlgorithm]::Create('System.Security.Cryptography.SHA256CryptoServiceProvider')",
            "        $sourceHash = [System.BitConverter]::ToString($sha256.ComputeHash($fileStream), 0).Replace('-', '').ToLowerInvariant()",
            "        $sha256.Dispose()",
            "        $fileStream.Dispose()",
            "        ",
            "        if ($sourceHash -ne $fileHash) {",
            "            return $false",
            "        }",
            "        else {",
            "            return $true",
            "        }",
            "    }",
            "    else {",
            "        return $false",
            "    }",
            "}",
            "",
            "function PrepareToRunModule {",
            "    $tempDirectory = $env:TEMP",
            "    $downloadPath = [IO.Path]::Combine($tempDirectory, $s3FileName)",
            "",
            "    try {",
            "",
            "        $isInstalled = $false",
            "        ",
            "        if (-Not (CheckFileHash $psModuleInstallFile $psModuleFileHash)) {",
            "            try {",
            "                $log += (\"Preparing to download {0} PowerShell module from S3.`r`n\" -f $appName)",
            "                $log += \"Obtaining instance region from instance metadata.`r`n\"",
            "                $metadataLocation = 'http://169.254.169.254/latest/dynamic/instance-identity/document/region'",
            "                $metadata = (New-Object Net.WebClient).DownloadString($metadataLocation)",
            "                $region = (ConvertFrom-JSON $metadata).region",
            "                if ($region -eq 'us-east-1') {",
            "                    $s3Location = $s3Location -f '', $region",
            "                } else {",
            "                    $s3Address = '-' + $region",
            "                    $s3Location = $s3Location -f $s3Address, $region",
            "                }",
            "",
            "                if (-Not (Test-Path($psModuleInstallLocation))) {",
            "                    $noOp = New-Item $psModuleInstallLocation -ItemType Directory",
            "                }",
            "",
            "                if (-Not (Test-Path($tempDirectory))) {",
            "                    $noOp = New-Item $tempDirectory -ItemType Directory",
            "                }",
            "",
            "                $log += (\"Downloading {0} PowerShell module from {1} to {2}.`r`n\" -f $appName, $s3Location, $downloadPath)",
            "                (New-Object Net.WebClient).DownloadFile($s3Location, $downloadPath)",
            "",
            "                if (CheckFileHash $downloadPath $s3FileHash ) {",
            "                    $log += (\"Extracting {0} zip file contents to temporary folder.`r`n\" -f $appName)",
            "                    try {",
            "                        (New-Object -Com Shell.Application).namespace($psModuleInstallLocation).CopyHere((New-Object -Com Shell.Application).namespace($downloadPath).Items(), 16)",
            "                    } catch [Exception] {",
            "                        ExtractZipCoreOs $downloadPath $psModuleInstallLocation",
            "                    }",
            "                }",
            "                else {",
            "                    throw ('The SHA hash of the {0} S3 source file does not match the expected value.' -f $appName)",
            "                }",
            "            } catch [Exception] {",
            "                $exceptionMessage = 'Exception thrown while downloading {0} PowerShell module with message: {1}' -f $appName, $_.Exception.Message",
            "                throw $exceptionMessage",
            "            }",
            "",
            "            $log += (\"Verifying SHA 256 of the {0} PowerShell module.`r`n\" -f $appName)",
            "            if (CheckFileHash $psModuleInstallFile $psModuleFileHash) {",
            "                $log += (\"Successfully downloaded and installed the {0} PowerShell module.`r`n\" -f $appName)",
            "            }",
            "            else {",
            "                throw ('The SHA hash of the {0} PowerShell module does not match the expected value.' -f $appName)",
            "            }",
            "        }",
            "    }",
            "    catch [Exception] {",
            "        $msg = \"An error occurred when executing {0}: {1}`r`nDetails:`r`n{2}\" -f $appName, $_.Exception.Message, $log",
            "        Write-Error $msg",
            "    ",
            "        exit -1",
            "    }",
            "    finally {",
            "        if (Test-Path $downloadPath) {",
            "            rm $downloadPath",
            "        }",
            "    }",
            "}",
            "",
            "# Run the script",
            "PrepareToRunModule",
            "RunModule",
            ""
          ]
        }
      ]
    }
  }
}
