{
  "schemaVersion": "1.2",
  "description": "Scans for or installs patches from a patch baseline.",
  "parameters": {
    "Operation": {
      "type": "String",
      "description": "(Required) The update or configuration to perform on the instance. The system checks if the baseline patches are installed. The install operation installs all patches in the baseline.",
      "allowedValues": [
        "Scan",
        "Install"
      ]
    },
    "SnapshotId": {
      "type": "String",
      "description": "(Optional) The snapshot Id to retrieve a patch baseline snapshot with.",
      "allowedPattern": "(^$)|^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
      "default": ""
    }
  },
  "runtimeConfig": {
    "aws:runPowerShellScript": {
      "properties": [
        {
          "id": "0.aws:runPowerShellScript",
          "timeoutSeconds": 7200,
          "runCommand": [
            "# Check the OS version",
            "if ([Environment]::OSVersion.Version.Major -le 5) {",
            "    Write-Error 'This command is not supported on Windows 2003 or lower.'",
            "    exit -1",
            "} elseif ([Environment]::OSVersion.Version.Major -ge 10) {",
            "    $sku = (Get-CimInstance -ClassName Win32_OperatingSystem).OperatingSystemSKU",
            "    if ($sku -eq 143 -or $sku -eq 144) {",
            "        Write-Host 'This command is not supported on Windows 2016 Nano Server.'",
            "        exit -1",
            "    }",
            "}",
            "# Check the SSM agent version",
            "$ssmAgentService = Get-ItemProperty 'HKLM:SYSTEM\\CurrentControlSet\\Services\\AmazonSSMAgent\\'",
            "if (-not $ssmAgentService -or $ssmAgentService.Version -lt '2.0.533.0') {",
            "    Write-Host 'This command is not supported with SSM Agent version less than 2.0.533.0.'",
            "    exit -1",
            "}",
            "",
            "# Application specific constants",
            "$appName = 'PatchBaselineOperations'",
            "$psModuleFileName = 'Amazon.PatchBaselineOperations.dll'",
            "$s3FileName = 'Amazon.PatchBaselineOperationsDeprecated-1.0.zip'",
            "$s3LocationUsEast = 'https://s3.amazonaws.com/aws-ssm-{0}/' + $appName.ToLower() + '/' + $s3FileName",
            "$s3LocationRegular = 'https://s3-{0}.amazonaws.com/aws-ssm-{0}/' + $appName.ToLower() + '/' + $s3FileName",
            "$s3LocationCn = 'https://s3.{0}.amazonaws.com.cn/aws-ssm-{0}/' + $appName.ToLower() + '/' + $s3FileName",
            "$s3FileHash = 'A1F2B7FA1EC2FD9124F8298F1F264909B10DAAE82626222D6F022B30DD8FE9F1'",
            "$psModuleHashes = @{",
            "    'Amazon.PatchBaselineOperations.dll' = '82D74510D6CFFCA67EBB9342843CDB126950F1849052424861134E71A2727266';",
            "    'AWSSDK.Core.dll' = 'F024905CDFE4DE022DCD4D9BCF8EE9F237EE27D73DCC32CCB3A69DFC088EB2B0';",
            "    'AWSSDK.S3.dll' = 'B24C349EC0ADEB8462B6B24A27D65650873830416FFF8E816852966C21E87267';",
            "    'AWSSDK.SimpleSystemsManagement.dll' = '627CA33D6B2463C453EEC5F4767C5907D34EB6C1D49D106E5DC9413FADC9DAD9';",
            "    'Newtonsoft.Json.dll' = '0516D4109263C126C779E4E8F5879349663FA0A5B23D6D44167403E14066E6F9';",
            "    'THIRD_PARTY_LICENSES.txt' = '6468E28E2C9EDAF28E98B025EE95C936ED7493AEB19207C36525A5ED5AD4AA56';",
            "    'YamlDotNet.dll' = 'D59E777A42A965327FCC18FC0AB7FA6729C0BCF845D239AC2811BD78F73A7F70'",
            "}",
            "",
            "# Folders and Logging",
            "$tempDirectory = $env:TEMP",
            "$downloadPath = [IO.Path]::Combine($tempDirectory, $s3FileName)",
            "$psModuleInstallLocation = [IO.Path]::Combine([Environment]::GetEnvironmentVariable([Environment+SpecialFolder]::ProgramFiles), 'Amazon', $appName)",
            "$psModuleInstallFile = [IO.Path]::Combine($psModuleInstallLocation, $psModuleFileName)",
            "",
            "function CheckFileHash ($filePath, $fileHash) {",
            "    if (Test-Path($filePath)) {",
            "        $fileStream = New-Object System.IO.FileStream($filePath, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read)",
            "        $sha256 = [System.Security.Cryptography.HashAlgorithm]::Create('System.Security.Cryptography.SHA256CryptoServiceProvider')",
            "        $sourceHash = [System.BitConverter]::ToString($sha256.ComputeHash($fileStream), 0).Replace('-', '').ToLowerInvariant()",
            "        $sha256.Dispose()",
            "        $fileStream.Dispose()",
            "",
            "        if ($sourceHash -ne $fileHash) {",
            "            return $false",
            "        }",
            "        else {",
            "            return $true",
            "        }",
            "    }",
            "    else {",
            "        return $false",
            "    }",
            "}",
            "",
            "function CheckPowerShellModuleInstallation ([bool]$suppressError) {",
            "    $isInstalled = $false",
            "    # Path does not exist meaning it has never been downloaded.",
            "    if (Test-Path($psModuleInstallLocation)) {",
            "        # Check if the expected number of files and directories are in the folder",
            "        if (((Get-ChildItem $psModuleInstallLocation -Directory | Measure-Object | %{$_.Count}) -eq 0) -and",
            "            ((Get-ChildItem $psModuleInstallLocation -File | Measure-Object | %{$_.Count}) -eq $psModuleHashes.Count)) {",
            "            $validFileHashes = $true",
            "",
            "            # Check each file for their expected file hash.",
            "            Get-ChildItem $psModuleInstallLocation -File | ForEach-Object {",
            "                if ($psModuleHashes.ContainsKey($_.Name)) {",
            "                    $installFile = [IO.Path]::Combine($psModuleInstallLocation, $_.Name)",
            "                    if (-Not (CheckFileHash $installFile $psModuleHashes[$_.Name])) {",
            "                        if (-Not $suppressError) {",
            "                            Write-Error ('The SHA hash of the {0} file does not match the expected value.' -f $_.Name)",
            "                        }",
            "                        $validFileHashes = $false",
            "                    }",
            "                } else {",
            "                    if (-Not $suppressError) {",
            "                        Write-Error ('The PowerShellModule installation folder contains an unexpected file with name {0}.' -f $_.Name)",
            "                    }",
            "                    $validFileHashes = $false",
            "                }",
            "            }",
            "            $isInstalled = $validFileHashes",
            "        } else {",
            "            if (-Not $suppressError) {",
            "                Write-Error ('An incorrect number of files were present in the PowerShellModule installation folder. The contents will be deleted.')",
            "            }",
            "        }",
            "        if (-Not $isInstalled) {",
            "            # Remove all files and folders as the folder contains potentially malicious software.",
            "            Remove-Item $psModuleInstallLocation -Recurse",
            "        }",
            "    }",
            "",
            "    return $isInstalled",
            "}",
            "",
            "function ExtractZipCoreOs ([string]$zipFilePath, [string]$destPath) {",
            "    try {",
            "        [System.Reflection.Assembly]::LoadWithPartialName('System.IO.Compression.FileSystem') | Out-Null",
            "        $zip = [System.IO.Compression.ZipFile]::OpenRead($zipFilePath)",
            "        foreach ($item in $zip.Entries) {",
            "            $extractedPath = Join-Path $destPath $item.FullName",
            "",
            "            if ($item.Length -eq 0) {",
            "                if ((Test-Path $extractedPath) -eq 0) {",
            "                    mkdir $extractedPath | Out-Null",
            "                }",
            "            } else {",
            "                $fileParent = Split-Path $extractedPath",
            "",
            "                if ((Test-Path $fileParent) -eq 0) {",
            "                    mkdir $fileParent | Out-Null",
            "                }",
            "",
            "                [System.IO.Compression.ZipFileExtensions]::ExtractToFile($item, $extractedPath, $true)",
            "            }",
            "        }",
            "    } catch {",
            "        throw 'Error encountered when extracting patch management zip file.`n$($_.Exception.Message)'",
            "    } finally {",
            "        $zip.Dispose()",
            "    }",
            "}",
            "",
            "function InstallPowerShellModule {",
            "    if (-Not (CheckPowerShellModuleInstallation $true)) {",
            "        Write-Output (\"Preparing to download {0} PowerShell module from S3.`r`n\" -f $appName)",
            "",
            "        #Setup the directories if they do not exist.",
            "        if (-Not (Test-Path($psModuleInstallLocation))) {",
            "            $noOp = New-Item $psModuleInstallLocation -ItemType Directory",
            "        }",
            "",
            "        if (-Not (Test-Path($tempDirectory))) {",
            "            $noOp = New-Item $tempDirectory -ItemType Directory",
            "        }",
            "        $region = $env:AWS_SSM_REGION_NAME",
            "        if ($region -eq 'us-east-1') {",
            "            $s3Location = $s3LocationUsEast -f $region",
            "        } elseif (($region -eq 'cn-north-1') -or ($region -eq 'cn-northwest-1')) {",
            "            $s3Location = $s3LocationCn -f $region",
            "        } else {",
            "            $s3Location = $s3LocationRegular -f $region",
            "        }",
            "",
            "        Write-Output (\"Downloading {0} PowerShell module from {1} to {2}.`r`n\" -f $appName, $s3Location, $downloadPath)",
            "        # Add Tls 1.2 support",
            "        [Net.ServicePointManager]::SecurityProtocol = [Net.ServicePointManager]::SecurityProtocol -bOr [Net.SecurityProtocolType]::Tls12",
            "",
            "        (New-Object Net.WebClient).DownloadFile($s3Location, $downloadPath)",
            "",
            "        if (CheckFileHash $downloadPath $s3FileHash ) {",
            "            Write-Output (\"Extracting {0} zip file contents to temporary folder.`r`n\" -f $appName)",
            "            try {",
            "               (New-Object -Com Shell.Application).namespace($psModuleInstallLocation).CopyHere((New-Object -Com Shell.Application).namespace($downloadPath).Items(), 16)",
            "            } catch [Exception] {",
            "                ExtractZipCoreOs $downloadPath $psModuleInstallLocation",
            "            }",
            "        }",
            "        else {",
            "            throw ('The SHA hash of the {0} S3 source file does not match the expected value.' -f $appName)",
            "        }",
            "",
            "        Write-Output (\"Verifying SHA 256 of the {0} PowerShell module files.`r`n\" -f $appName)",
            "        if (-Not (CheckPowerShellModuleInstallation $false)) {",
            "            throw ('The verification of the {0} PowerShell module did not pass.' -f $appName)",
            "        }",
            "",
            "        Write-Output (\"Successfully downloaded and installed the {0} PowerShell module.`r`n\" -f $appName)",
            "    }",
            "}",
            "",
            "try {",
            "    InstallPowerShellModule",
            "} catch [Exception] {",
            "    $msg = \"An error occurred when executing {0}: {1}`r`n\" -f $appName, $_.Exception.Message",
            "    Write-Error $msg",
            "    exit -1",
            "}",
            "finally {",
            "    if (Test-Path $downloadPath) {",
            "        rm $downloadPath",
            "    }",
            "}",
            "",
            "# Setup the command",
            "Import-Module $psModuleInstallFile",
            "$response = Invoke-PatchBaselineOperation -Operation {{Operation}} -SnapshotId '{{SnapshotId}}' -InstanceId $env:AWS_SSM_INSTANCE_ID -Region $env:AWS_SSM_REGION_NAME",
            "",
            "if ($response.ExitCode -ne 3010)",
            "{",
            "    $response.ToString()",
            "}",
            "",
            "exit $response.ExitCode"
          ]
        }
      ]
    }
  }
}
