{
  "schemaVersion": "0.3",
  "description": "Updates AMI with Linux distribution packages and Amazon software. For details,see https://docs.aws.amazon.com/systems-manager/latest/userguide/automation-awsdocs-linux.html",
  "assumeRole": "{{AutomationAssumeRole}}",
  "parameters": {
    "SourceAmiId": {
      "type": "String",
      "description": "(Required) The source Amazon Machine Image ID."
    },
    "IamInstanceProfileName": {
      "type": "String",
      "description": "(Required) The instance profile that enables Systems Manager (SSM) to manage the instance.",
      "default": "ManagedInstanceProfile"
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
      "default": "arn:aws:iam::{{global:ACCOUNT_ID}}:role/AutomationServiceRole"
    },
    "TargetAmiName": {
      "type": "String",
      "description": "(Optional) The name of the new AMI that will be created. Default is a system-generated string including the source AMI id, and the creation time and date.",
      "default": "UpdateLinuxAmi_from_{{SourceAmiId}}_on_{{global:DATE_TIME}}"
    },
    "InstanceType": {
      "type": "String",
      "description": "(Optional) Type of instance to launch as the workspace host. Instance types vary by region. Default is t2.micro.",
      "default": "t2.micro"
    },
    "SubnetId": {
      "type": "String",
      "description": "(Optional) Specify the SubnetId if you want to launch EC2 instance in a specific subnet.",
      "default": ""
    },
    "PreUpdateScript": {
      "type": "String",
      "description": "(Optional) URL of a script to run before updates are applied. Default (\"none\") is to not run a script.",
      "default": "none"
    },
    "PostUpdateScript": {
      "type": "String",
      "description": "(Optional) URL of a script to run after package updates are applied. Default (\"none\") is to not run a script.",
      "default": "none"
    },
    "IncludePackages": {
      "type": "String",
      "description": "(Optional) Only update these named packages. By default (\"all\"), all available updates are applied.",
      "default": "all"
    },
    "ExcludePackages": {
      "type": "String",
      "description": "(Optional) Names of packages to hold back from updates, under all conditions. By default (\"none\"), no package is excluded.",
      "default": "none"
    }
  },
  "mainSteps": [
    {
      "name": "launchInstance",
      "action": "aws:runInstances",
      "maxAttempts": 3,
      "timeoutSeconds": 1200,
      "onFailure": "Abort",
      "inputs": {
        "ImageId": "{{SourceAmiId}}",
        "InstanceType": "{{InstanceType}}",
        "UserData": "IyEvYmluL2Jhc2gKCmZ1bmN0aW9uIGdldF9jb250ZW50cygpIHsKICAgIGlmIFsgLXggIiQod2hpY2ggY3VybCkiIF07IHRoZW4KICAgICAgICBjdXJsIC1zIC1mICIkMSIKICAgIGVsaWYgWyAteCAiJCh3aGljaCB3Z2V0KSIgXTsgdGhlbgogICAgICAgIHdnZXQgIiQxIiAtTyAtCiAgICBlbHNlCiAgICAgICAgZGllICJObyBkb3dubG9hZCB1dGlsaXR5IChjdXJsLCB3Z2V0KSIKICAgIGZpCn0KCnJlYWRvbmx5IElERU5USVRZX1VSTD0iaHR0cDovLzE2OS4yNTQuMTY5LjI1NC8yMDE2LTA2LTMwL2R5bmFtaWMvaW5zdGFuY2UtaWRlbnRpdHkvZG9jdW1lbnQvIgpyZWFkb25seSBUUlVFX1JFR0lPTj0kKGdldF9jb250ZW50cyAiJElERU5USVRZX1VSTCIgfCBhd2sgLUZcIiAnL3JlZ2lvbi8geyBwcmludCAkNCB9JykKcmVhZG9ubHkgREVGQVVMVF9SRUdJT049InVzLWVhc3QtMSIKcmVhZG9ubHkgUkVHSU9OPSIke1RSVUVfUkVHSU9OOi0kREVGQVVMVF9SRUdJT059IgoKcmVhZG9ubHkgU0NSSVBUX05BTUU9ImF3cy1pbnN0YWxsLXNzbS1hZ2VudCIKU0NSSVBUX1VSTD0iaHR0cHM6Ly9hd3Mtc3NtLWRvd25sb2Fkcy0kUkVHSU9OLnMzLmFtYXpvbmF3cy5jb20vc2NyaXB0cy8kU0NSSVBUX05BTUUiCgppZiBbICIkUkVHSU9OIiA9PSAidXMtZ292LXdlc3QtMSIgLW8gIiRSRUdJT04iID09ICJ1cy1nb3YtZWFzdC0xIiBdOyB0aGVuCiAgU0NSSVBUX1VSTD0iaHR0cHM6Ly9hd3Mtc3NtLWRvd25sb2Fkcy0kUkVHSU9OLnMzLiRSRUdJT04uYW1hem9uYXdzLmNvbS9zY3JpcHRzLyRTQ1JJUFRfTkFNRSIKZmkKCmNkIC90bXAKRklMRV9TSVpFPTAKTUFYX1JFVFJZX0NPVU5UPTMKUkVUUllfQ09VTlQ9MAoKd2hpbGUgWyAkUkVUUllfQ09VTlQgLWx0ICRNQVhfUkVUUllfQ09VTlQgXSA7IGRvCiAgZWNobyBBV1MtVXBkYXRlTGludXhBbWk6IERvd25sb2FkaW5nIHNjcmlwdCBmcm9tICRTQ1JJUFRfVVJMCiAgZ2V0X2NvbnRlbnRzICIkU0NSSVBUX1VSTCIgPiAiJFNDUklQVF9OQU1FIgogIEZJTEVfU0laRT0kKGR1IC1rIC90bXAvJFNDUklQVF9OQU1FIHwgY3V0IC1mMSkKICBlY2hvIEFXUy1VcGRhdGVMaW51eEFtaTogRmluaXNoZWQgZG93bmxvYWRpbmcgc2NyaXB0LCBzaXplOiAkRklMRV9TSVpFCiAgaWYgWyAkRklMRV9TSVpFIC1ndCAwIF07IHRoZW4KICAgIGJyZWFrCiAgZWxzZQogICAgaWYgW1sgJFJFVFJZX0NPVU5UIC1sdCBNQVhfUkVUUllfQ09VTlQgXV07IHRoZW4KICAgICAgUkVUUllfQ09VTlQ9JCgoUkVUUllfQ09VTlQrMSkpOwogICAgICBlY2hvIEFXUy1VcGRhdGVMaW51eEFtaTogRmlsZVNpemUgaXMgMCwgcmV0cnlDb3VudDogJFJFVFJZX0NPVU5UCiAgICBmaQogIGZpIApkb25lCgppZiBbICRGSUxFX1NJWkUgLWd0IDAgXTsgdGhlbgogIGNobW9kICt4ICIkU0NSSVBUX05BTUUiCiAgZWNobyBBV1MtVXBkYXRlTGludXhBbWk6IFJ1bm5pbmcgVXBkYXRlU1NNQWdlbnQgc2NyaXB0IG5vdyAuLi4uCiAgLi8iJFNDUklQVF9OQU1FIiAtLXJlZ2lvbiAiJFJFR0lPTiIKZWxzZQogIGVjaG8gQVdTLVVwZGF0ZUxpbnV4QW1pOiBVbmFibGUgdG8gZG93bmxvYWQgc2NyaXB0LCBxdWl0dGluZyAuLi4uCmZp",
        "MinInstanceCount": 1,
        "MaxInstanceCount": 1,
        "IamInstanceProfileName": "{{IamInstanceProfileName}}",
        "SubnetId": "{{ SubnetId }}"
      }
    },
    {
      "name": "verifySsmInstall",
      "action": "aws:runCommand",
      "maxAttempts": 3,
      "timeoutSeconds": 1200,
      "onFailure": "Abort",
      "inputs": {
        "DocumentName": "AWS-RunShellScript",
        "InstanceIds": [
          "{{launchInstance.InstanceIds}}"
        ],
        "Parameters": {
          "commands": [
            "hostname"
          ]
        }
      }
    },
    {
      "name": "updateOSSoftware",
      "action": "aws:runCommand",
      "maxAttempts": 3,
      "timeoutSeconds": 3600,
      "onFailure": "Abort",
      "inputs": {
        "DocumentName": "AWS-RunShellScript",
        "InstanceIds": [
          "{{launchInstance.InstanceIds}}"
        ],
        "Parameters": {
          "commands": [
            "#!/bin/bash",
            "",
            "set -e",
            "",
            "function unhold_deb_packages() {",
            "    for package in $EXCLUDE_PACKAGES; do",
            "        apt-mark unhold $package",
            "    done",
            "}",
            "",
            "function die() {",
            "    if [ \"$(get_dist)\" == \"debian\" ]; then",
            "        unhold_deb_packages",
            "    fi",
            "",
            "    echo \"$@\" >&2",
            "    exit 1",
            "}",
            "",
            "function get_contents() {",
            "    if [ -x \"$(which curl)\" ]; then",
            "        curl -s -f \"$1\"",
            "    elif [ -x \"$(which wget)\" ]; then",
            "        wget \"$1\" -O -",
            "    else",
            "        die \"No download utility (curl, wget)\"",
            "    fi",
            "}",
            "",
            "function sanitize_inputs() {",
            "    value=\"$(echo $@ | sed 's/,/ /g' | xargs | xargs)\"",
            "",
            "    if [ ! -z \"$value\" ] &&",
            "        [ \"$value\" != \"none\" ] &&",
            "        [ \"$value\" != \"all\" ]; then",
            "        echo \"$value\"",
            "    fi",
            "}",
            "",
            "function echo_options() {",
            "    echo \\\"\\$PRE_UPDATE_SCRIPT_URL\\\" == \\\"$PRE_UPDATE_SCRIPT_URL\\\"",
            "    echo \\\"\\$POST_UPDATE_SCRIPT_URL\\\" == \\\"$POST_UPDATE_SCRIPT_URL\\\"",
            "    echo \\\"\\$INCLUDE_PACKAGES\\\" == \\\"$INCLUDE_PACKAGES\\\"",
            "    echo \\\"\\$EXCLUDE_PACKAGES\\\" == \\\"$EXCLUDE_PACKAGES\\\"",
            "}",
            "",
            "function exec_cmd() {",
            "    echo \"Invoking $@...\"",
            "    eval \"$@\"",
            "",
            "    if [ $? -ne 0 ]; then",
            "        die \"\"",
            "    fi",
            "}",
            "",
            "function is_debuntu() {",
            "    grep -E -i -c 'Debian|Ubuntu' /etc/issue 2>&1 &>/dev/null",
            "    [ $? -eq 0 ] && echo \"true\" || echo \"false\"",
            "}",
            "",
            "function is_redhat() {",
            "    if [ -f \"/etc/system-release\" ] ||",
            "        [ -f \"/etc/redhat-release\" ]; then",
            "        echo \"true\"",
            "    else",
            "        echo \"false\"",
            "    fi",
            "}",
            "",
            "function get_dist() {",
            "    if [ \"$(is_debuntu)\" == \"true\" ]; then",
            "        echo \"debian\"",
            "    elif [ \"$(is_redhat)\" == \"true\" ]; then",
            "        echo \"linux\"",
            "    else",
            "        die \"Unknown distribution\"",
            "    fi",
            "}",
            "",
            "function run_hook_script() {",
            "    script_url=\"$1\"",
            "    tmp_file=\"$(mktemp)\"",
            "",
            "    echo \"Downloading hook script from $script_url\"",
            "",
            "    get_contents \"$script_url\" > \"$tmp_file\"",
            "    chmod +x \"$tmp_file\"",
            "",
            "    exec_cmd \"$tmp_file\"",
            "}",
            "",
            "function update_cli() {",
            "    if [ -x \"$(which pip 2>/dev/null)\" ]; then",
            "        exec_cmd \"pip install --upgrade awscli\"",
            "    fi",
            "}",
            "",
            "function apt_get_update() {",
            "",
            "    dpkg_flags=\"-o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold\"",
            "    apt_noninteractive_cmd=\"DEBIAN_FRONTEND=noninteractive apt-get $dpkg_flags\"",
            "",
            "    exec_cmd \"apt-get clean\"",
            "    exec_cmd \"apt-get update\"",
            "",
            "    for package in $EXCLUDE_PACKAGES; do",
            "        exec_cmd \"apt-mark hold $package\"",
            "    done",
            "",
            "    if [ -z \"$INCLUDE_PACKAGES\" ]; then",
            "        exec_cmd \"$apt_noninteractive_cmd -y dist-upgrade\"",
            "    else",
            "        for package in $INCLUDE_PACKAGES; do",
            "            exec_cmd \"$apt_noninteractive_cmd -y install --only-upgrade $package\"",
            "        done",
            "    fi",
            "",
            "    unhold_deb_packages",
            "}",
            "",
            "function yum_upgrade() {",
            "    exec_cmd 'yum clean all'",
            "",
            "    yum_cmd='yum -y upgrade'",
            "",
            "    for package in $EXCLUDE_PACKAGES; do",
            "        yum_cmd=\"$yum_cmd -x $package\"",
            "    done",
            "",
            "    if [ ! -z \"$INCLUDE_PACKAGES\" ]; then",
            "        yum_cmd=\"$yum_cmd $INCLUDE_PACKAGES\"",
            "    fi",
            "",
            "    exec_cmd \"$yum_cmd\"",
            "}",
            "",
            "function remove_excludes_from_includes() {",
            "    if [ -z \"$EXCLUDE_PACKAGES\" ] || [ -z \"$INCLUDE_PACKAGES\" ]; then",
            "        return",
            "    fi",
            "",
            "    declare -A includes",
            "    declare -A excludes",
            "",
            "    for package in $EXCLUDE_PACKAGES; do",
            "        excludes[$package]=\"true\"",
            "    done",
            "",
            "    for package in $INCLUDE_PACKAGES; do",
            "        if [ \"${excludes[$package]}\" != \"true\" ]; then",
            "            includes[$package]=\"true\"",
            "        fi",
            "    done",
            "",
            "    INCLUDE_PACKAGES=\"${!includes[@]}\"",
            "}",
            "",
            "function update_packages() {",
            "    remove_excludes_from_includes",
            "",
            "    if [ \"$(get_dist)\" == \"debian\" ]; then",
            "        apt_get_update",
            "    else",
            "        yum_upgrade",
            "    fi",
            "}",
            "",
            "function main() {",
            "    PRE_UPDATE_SCRIPT_URL=\"$(sanitize_inputs {{PreUpdateScript}})\"",
            "    POST_UPDATE_SCRIPT_URL=\"$(sanitize_inputs {{PostUpdateScript}})\"",
            "    INCLUDE_PACKAGES=\"$(sanitize_inputs {{IncludePackages}})\"",
            "    EXCLUDE_PACKAGES=\"$(sanitize_inputs {{ExcludePackages}})\"",
            "    echo_options",
            "",
            "    if [ ! -z \"$PRE_UPDATE_SCRIPT_URL\" ]; then",
            "        run_hook_script \"$PRE_UPDATE_SCRIPT_URL\"",
            "    fi",
            "",
            "    update_cli",
            "    update_packages",
            "",
            "    if [ ! -z \"$POST_UPDATE_SCRIPT_URL\" ]; then",
            "        run_hook_script \"$POST_UPDATE_SCRIPT_URL\"",
            "    fi",
            "",
            "    exit 0",
            "}",
            "",
            "main \"$@\""
          ]
        }
      }
    },
    {
      "name": "stopInstance",
      "action": "aws:changeInstanceState",
      "maxAttempts": 3,
      "timeoutSeconds": 1200,
      "onFailure": "Abort",
      "inputs": {
        "InstanceIds": [
          "{{launchInstance.InstanceIds}}"
        ],
        "DesiredState": "stopped"
      }
    },
    {
      "name": "createImage",
      "action": "aws:createImage",
      "maxAttempts": 3,
      "onFailure": "Abort",
      "inputs": {
        "InstanceId": "{{launchInstance.InstanceIds}}",
        "ImageName": "{{TargetAmiName}}",
        "NoReboot": true,
        "ImageDescription": "AMI Generated by EC2 Automation on {{global:DATE_TIME}} from {{SourceAmiId}}"
      }
    },
    {
      "name": "terminateInstance",
      "action": "aws:changeInstanceState",
      "maxAttempts": 3,
      "onFailure": "Continue",
      "inputs": {
        "InstanceIds": [
          "{{launchInstance.InstanceIds}}"
        ],
        "DesiredState": "terminated"
      }
    }
  ],
  "outputs": [
    "createImage.ImageId"
  ]
}
