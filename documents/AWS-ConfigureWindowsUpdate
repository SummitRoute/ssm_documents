{
  "schemaVersion": "1.2",
  "description": "Enable or disable automatic Windows Updates.",
  "parameters": {
    "updateLevel": {
      "type": "String",
      "description": "(Required) Install Updates Automatically: Windows automatically downloads and installs updates. If an update requires a reboot, the computer is automatically rebooted 15 minutes after updates have been installed. Never Check For Updates: Windows never checks for or downloads updates.",
      "allowedValues": [
        "InstallUpdatesAutomatically",
        "NeverCheckForUpdates"
      ]
    },
    "scheduledInstallDay": {
      "type": "String",
      "default": "Sunday",
      "description": "(Optional) The day of the week when you want Windows to download and install updates. Applies only if Install Updates Automatically is selected. Default is Sunday.",
      "allowedValues": [
        "Daily",
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
      ]
    },
    "scheduledInstallTime": {
      "type": "String",
      "default": "03:00",
      "description": "(Optional) The time of day when you want Windows to download and install updates. Applies only if Install Updates Automatically is selected. Default is 03:00.",
      "allowedValues": [
        "00:00",
        "01:00",
        "02:00",
        "03:00",
        "04:00",
        "05:00",
        "06:00",
        "07:00",
        "08:00",
        "09:00",
        "10:00",
        "11:00",
        "12:00",
        "13:00",
        "14:00",
        "15:00",
        "16:00",
        "17:00",
        "18:00",
        "19:00",
        "20:00",
        "21:00",
        "22:00",
        "23:00"
      ]
    }
  },
  "runtimeConfig": {
    "aws:runPowerShellScript": {
      "properties": [
        {
          "id": "0.aws:runPowerShellScript",
          "runCommand": [
            "# Check the OS version",
            "if ([Environment]::OSVersion.Version.Major -le 5) {",
            "    Write-Error 'This command is not supported on Windows 2003 or lower.'",
            "    exit -1",
            "} elseif ([Environment]::OSVersion.Version -ge \"10.0\") {",
            "    $sku = (Get-CimInstance -ClassName Win32_OperatingSystem).OperatingSystemSKU",
            "    if ($sku -eq 143 -or $sku -eq 144) {",
            "        Write-Host \"This command is not supported on Windows 2016 Nano Server.\"",
            "        exit -1",
            "    }",
            "}",
            "",
            "$configureWindowsUpdateFileVersion = 'Amazon.ConfigureWindowsUpdate-1.2.zip'",
            "$configureWindowsUpdateFileHash = '2f67fedbc27a405b0adafd3e8ecfefa877a6219e78abd3abecea4157b37edae5'",
            "$tempLocation = [Environment]::GetEnvironmentVariable('Temp') + '\\' + $configureWindowsUpdateFileVersion",
            "$powerShellModuleLocation = [Environment]::GetEnvironmentVariable('Windir') + '\\System32\\WindowsPowerShell\\v1.0\\Modules'",
            "function ExtractZipCoreOs ([string]$zipFilePath, [string]$destPath) {",
            "    try",
            "    {",
            "        [System.Reflection.Assembly]::LoadWithPartialName(\"System.IO.Compression.FileSystem\") | Out-Null",
            "",
            "        $zip = [System.IO.Compression.ZipFile]::OpenRead($zipFilePath)",
            "",
            "        foreach ($item in $zip.Entries) {",
            "            $extractedPath = Join-Path $destPath $item.FullName",
            "",
            "            if ($item.Length -eq 0) {",
            "                if ((Test-Path $extractedPath) -eq 0) {",
            "                    mkdir $extractedPath | Out-Null",
            "                }",
            "            } else {",
            "                $fileParent = Split-Path $extractedPath",
            "",
            "                if ((Test-Path $fileParent) -eq 0) {",
            "                    mkdir $fileParent | Out-Null",
            "                }",
            "",
            "                [System.IO.Compression.ZipFileExtensions]::ExtractToFile($item, $extractedPath, $true)",
            "            }",
            "        }",
            "    } ",
            "    catch",
            "    {",
            "        throw \"Error encountered when extracting ConfigureWindowsUpdate zip file.`n$($_.Exception.Message)\"",
            "    }",
            "    finally",
            "    {",
            "        $zip.Dispose()",
            "    }",
            "}",
            "function GetRegion {",
            "    try {",
            "        Write-Host 'Obtaining instance region from SSM agent or instance metadata.'",
            "        $region = $env:AWS_SSM_REGION_NAME",
            "",
            "        if ($region -eq $null) { ",
            "            $metadataUrl = 'http://169.254.169.254/latest/dynamic/instance-identity/document'",
            "            $region = ((Invoke-WebRequest -UseBasicParsing -uri $metadataUrl).Content | ConvertFrom-Json).region",
            "        }",
            "",
            "        if (($region -eq $null) -or ($region -eq '')) {",
            "            throw \"Region could not be determined from agent environment variable or metadata.\"",
            "        }",
            "",
            "        $region",
            "    } catch {",
            "        throw \"An error occurred while determining the region.`n$($_.Exception.Message)\"",
            "    }",
            "} ",
            "function GetS3DownloadUrl ([string]$appPath, [string]$fileVersion) {",
            "    $region = GetRegion",
            "",
            "    if ($region.StartsWith('cn-')) {",
            "        # China endpoint",
            "        $s3PrefixUrl = 'https://s3.{0}.amazonaws.com.cn/aws-ssm-{0}/'",
            "    } elseif ($region.StartsWith('us-gov')) {",
            "        # GovCloud endpoint",
            "        $s3PrefixUrl = 'https://s3-fips-{0}.amazonaws.com/aws-ssm-{0}/'",
            "    } else {",
            "        # Public AWS endpoint",
            "        $s3PrefixUrl = 'https://s3.dualstack.{0}.amazonaws.com/aws-ssm-{0}/'",
            "    }",
            "",
            "    $s3Location = ($s3PrefixUrl + $appPath + $fileVersion) -f $region",
            "    $s3Location",
            "}",
            "",
            "try {",
            "    $s3Location = GetS3DownloadUrl 'aws-configurewindowsupdate/' $configureWindowsUpdateFileVersion",
            "",
            "    Write-Host 'Downloading ConfigureWindowsUpdate PowerShell module from S3' $region $s3Location",
            "    Start-BitsTransfer -Source $s3Location -Destination $tempLocation",
            "    Write-Host 'Verifying SHA 256 of the ConfigureWindowsUpdate PowerShell module zip file.'",
            "    $fileStream = New-Object System.IO.FileStream($tempLocation, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read)",
            "    $sha256 = [System.Security.Cryptography.HashAlgorithm]::Create('System.Security.Cryptography.SHA256CryptoServiceProvider')",
            "    $sourceHash = [System.BitConverter]::ToString($sha256.ComputeHash($fileStream), 0).Replace('-', '').ToLower()",
            "    $sha256.Dispose()",
            "    $fileStream.Dispose()",
            "    if ($sourceHash -ne $configureWindowsUpdateFileHash) {",
            "        Write-Error -Message 'The SHA of the PowerShell module does not pass match the expected value.' -Category InvalidResult  ",
            "        rm $tempLocation",
            "        exit 1",
            "    }",
            "    Write-Host 'Extracting ConfigureWindowsUpdate zip file contents to the Windows PowerShell module folder.'",
            "    try {",
            "        (New-Object -Com Shell.Application).namespace($powerShellModuleLocation).CopyHere((New-Object -Com Shell.Application).namespace($tempLocation).Items(), 16)",
            "    } catch [Exception] {",
            "        ExtractZipCoreOs $tempLocation $powerShellModuleLocation",
            "    }",
            "    rm $tempLocation",
            "    Write-Host 'Successfully downloaded and installed PowerShell module for the AWS-ConfigureWindowsUpdate document.'",
            "} catch [Exception] {",
            "    $exceptionMessage = 'Exception thrown while downloading ConfigureWindowsUpdate PowerShell module with message: {0}' -f $_.Exception.Message ",
            "    Write-Error $exceptionMessage",
            "    if (Test-Path $tempLocation) {",
            "        rm $tempLocation",
            "    }",
            "    exit 1",
            "}",
            "try {",
            "    $datetime = [DateTime]::MinValue",
            "    if ([DateTime]::TryParse('{{ scheduledInstallTime }}', [ref]$datetime)) {",
            "        Set-WindowsUpdate -UpdateLevel {{ updateLevel }} -ScheduledInstallDay {{ scheduledInstallDay }} -ScheduledInstallTime $datetime.Hour",
            "    } else {",
            "        Write-Error -Message 'Invalid value for the 'scheduledInstallTime' parameter.' -Category InvalidArgument",
            "        exit 1",
            "    }",
            "} catch [Exception] {",
            "    $exceptionMessage = 'Exception thrown while setting Windows update message: {0}' -f $_.Exception.Message ",
            "    Write-Error $exceptionMessage",
            "    exit 1",
            "}"
          ]
        }
      ]
    }
  }
}
