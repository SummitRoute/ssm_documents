{
  "schemaVersion": "2.2",
  "description": "Perform VSS Freeze or Thaw operation to enable application consistent snapshots on an EC2 Windows instance. The caller is responsible for initiating EBS create snapshot after Freeze completion.",
  "parameters": {
    "Action": {
      "type": "String",
      "description": "(Required) Freeze operation will flush pending IO to the specified EBS volume and halt IO.  Thaw operation will resume IO to the EBS volume.  Thaw must be called within 10 seconds of Freeze completion.",
      "allowedValues": [
        "Freeze",
        "Thaw"
      ],
      "default": "Freeze"
    },
    "NoWriters": {
      "type": "String",
      "description": "(Optional) Select True to exclude application VSS writers from the snapshot process. This option may be useful to resolve conflicts with third party VSS backup solutions.",
      "allowedValues": [
        "True",
        "False"
      ],
      "default": "False"
    },
    "CopyOnly": {
      "type": "String",
      "description": "(Optional) Select True to indicate a COPY ONLY backup operation.  By default a FULL backup operation is performed.  This option will prevent breaking the differential backup chain in SQL Server when performing a backup.",
      "allowedValues": [
        "True",
        "False"
      ],
      "default": "False"
    },
    "Devices": {
      "type": "String",
      "description": "(Required for Freeze) Freeze IO to a comma delimited list of device names. Example: xvdb,xvdc",
      "default": ""
    },
    "Volumes": {
      "type": "String",
      "description": "(Required for Freeze) Freeze IO to a comma delimited list of EBS volumes IDs. Example: vol-1234567812345678,vol-2234567812345678",
      "default": ""
    }
  },
  "mainSteps": [
    {
      "precondition": {
        "StringEquals": [
          "platformType",
          "Windows"
        ]
      },
      "action": "aws:runPowerShellScript",
      "name": "runPowerShellScript",
      "inputs": {
        "runCommand": [
          "# Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "",
          "$EBS_VOLUME_MATCH = '(?<=vol).*(?=_)'",
          "$EBS_VOLUME_MATCH2 = '(?<=vol)(.*)'",
          "",
          "",
          "#",
          "# Function to begin the VSS snapshot of a EBS volume",
          "#",
          "function EbsVssFreeze {",
          "    param(",
          "        [string]$driveLetter,",
          "        [boolean]$CopyOnly,",
          "        [boolean]$NoWriters",
          "    )",
          "",
          "    if ($script:inProgress -eq $true) {",
          "        return",
          "    }",
          "",
          "    $namedPipe = \"01C0026F-7357-49CD-BD74-657EAF079673\"",
          "    $pipeServer = new-object System.IO.Pipes.NamedPipeServerStream($namedPipe, ",
          "        [System.IO.Pipes.PipeDirection]::In,",
          "        1,",
          "        [System.IO.Pipes.PipeTransmissionMode]::Byte)",
          "",
          "    $script:inProgress = $true",
          "",
          "    $vssAgentPath = \"$env:ProgramFiles\\Amazon\\AwsVssComponents\\ec2-vss-agent.exe\"",
          "    if (Test-Path \"$vssAgentPath\") {",
          "        if ((get-process \"ec2-vss-agent\" -ea SilentlyContinue) -ne $Null) { ",
          "            Write-Host \"ec2-vss-agent is current running, snapshot already in progress.\" ",
          "            exit 1",
          "        }",
          "",
          "        $params = $driveLetter",
          "",
          "        if ($copyOnly) {",
          "            Write-Host \"Copy only option selected\"",
          "            $params = \"-copy \" + $params",
          "        }",
          "",
          "        if ($noWriters) {",
          "            Write-Host \"No writers option selected\"",
          "            $params = \"-nw \" + $params",
          "        }",
          "        ",
          "        Start-Process $vssAgentPath $params",
          "",
          "    } else {",
          "        Write-Host 'ec2-vss-agent.exe is not installed. To install, run command AWS-ConfigureAWSPackage with package AwsVssComponents'",
          "        exit 1",
          "    }",
          "",
          "    # Wait for connection from provider indicating VSS freeze has begun",
          "    $pipeServer.WaitForConnection()",
          "    try {",
          "        ",
          "        $pipeReader = new-object System.IO.StreamReader($pipeServer)",
          "        $string = $pipeReader.ReadLine()",
          "        Write-Host 'EBS snapshot Freeze message received:' $string",
          "        ",
          "    } catch {",
          "        Write-Host \"Freeze pipe read failed\"",
          "        Write-Error  $_",
          "    } finally {",
          "        Write-Host \"Disposing of pipes.\"",
          "        $pipeReader.Dispose()",
          "        $pipeServer.Dispose()",
          "    }",
          "}",
          "",
          "#",
          "# Function to release VSS freeze of EBS volume after snapshot is complete.",
          "#",
          "function EbsVssThaw() {",
          "    # Return if a VSS snapshot is not in progress",
          "    if ($script:inProgress -eq $false) {",
          "        return;",
          "    }",
          "",
          "    $namedPipe = \"8ef5c9e5-9c84-43eb-a8f7-c60b0efd7b72\"",
          "    $pipeClient = new-object System.IO.Pipes.NamedPipeClientStream(\".\",",
          "        $namedPipe, ",
          "        [System.IO.Pipes.PipeDirection]::In,",
          "        [System.IO.Pipes.PipeOptions]::Asynchronous)",
          "    try {",
          "        # Wait for connection from provider indicating VSS freeze has completed",
          "        $pipeClient.Connect(10000)",
          "        try {",
          "            $pipeReader = new-object System.IO.StreamReader($pipeClient)",
          "",
          "            $string = $pipeReader.ReadLine()",
          "        } catch {",
          "            Write-Host \"Thaw pipe read failed\"",
          "            Write-Error  $_",
          "",
          "        } finally {",
          "            $pipeReader.Dispose()",
          "            $pipeClient.Dispose()",
          "        }",
          "    } catch {",
          "        Write-Host \"Thaw pipe connection failed\"",
          "        Write-Error  $_",
          "        ",
          "    } finally {",
          "        $pipeClient.Dispose()",
          "    }",
          "",
          "    if ($string -like 'EBS done') {",
          "        return $true",
          "    } else {",
          "        return $false",
          "    }",
          "}",
          "",
          "#",
          "# Helper function to retrieve EC2 instance meta-data.",
          "#",
          "function Get-EC2InstanceMetadata {",
          "    param([string]$Path)",
          "    Invoke-RestMethod -Uri \"http://169.254.169.254/latest/$Path\"",
          "}",
          "",
          "",
          "#",
          "# Helper function to convert SCSI target ID to xvd* EBS device name.",
          "#",
          "function Convert-SCSITargetIdToDeviceName {",
          "    param([int]$SCSITargetId)",
          "    If ($SCSITargetId -eq 0) {",
          "        return '/dev/sda1'",
          "    }",
          "    $deviceName = 'xvd'",
          "    If ($SCSITargetId -gt 25) {",
          "        $deviceName += [char](0x60 + [int]($SCSITargetId / 26))",
          "    }",
          "    $deviceName += [char](0x61 + $SCSITargetId % 26)",
          "    return $deviceName",
          "}",
          "",
          "",
          "#",
          "# Retrieve Storage Spaces drive mapping with EBS volume ID for C5 and newer instance types",
          "#",
          "function Get-AwsNvmeStorageSpacesEbsDiskMapping {",
          "    ",
          "    $disklist = @()",
          "",
          "    # Exit if we are not on at least Server 2012",
          "    if (([Decimal]([environment]::OSVersion.Version).Major + [Decimal]([environment]::OSVersion.Version).Minor * .1) -lt 6.2) {",
          "        return $null",
          "    }",
          "",
          "    $physicalDisks = Get-PhysicalDisk | Where-Object {",
          "        $_.SerialNumber -match $EBS_VOLUME_MATCH -or $_.AdapterSerialNumber -match $EBS_VOLUME_MATCH2",
          "    }",
          "    ",
          "    if ($physicalDisks.Count -eq 0) {",
          "        return $null",
          "    }",
          "    ",
          "    foreach ($pd in $physicalDisks) {",
          "",
          "        $pool1 = Get-StoragePool -PhysicalDisk $pd -IsPrimordial $False -ErrorAction SilentlyContinue",
          "",
          "        $volumeNumber = $pd.SerialNumber | Select-String $EBS_VOLUME_MATCH | % { $_.Matches } | % { $_.Value }",
          "        ",
          "        if ($volumeNumber -eq $null) {",
          "            $volumeNumber = $pd.AdapterSerialNumber | Select-String $EBS_VOLUME_MATCH2 | % { $_.Matches } | % { $_.Value }",
          "        }",
          "",
          "        $ebsVolumeId = \"vol-$volumeNumber\"",
          "",
          "        foreach ($vd in Get-VirtualDisk) {",
          "            $pool2 = Get-StoragePool -VirtualDisk $vd",
          "            if ($pool1 -like $pool2) {",
          "                $vol = ($vd | Get-Disk | Get-Partition | Get-Volume)",
          "                $diskList += New-Object PSObject -Property @{",
          "                    Disk          = If ($pd -eq $null) { $null } Else { $pd.DeviceId };",
          "                    Partitions    = 0;",
          "                    DriveLetter   = If ($vol -eq $null) { $null } Else { ($vol.DriveLetter + ':') };",
          "                    EbsVolumeId   = If ($pd -eq $null) { $null } Else { $ebsVolumeId };",
          "                    Device        = If ($pd -eq $null) { $null } Else { $pd.FriendlyName };",
          "                    VolumeName    = If ($vol -eq $null) { $null } Else { $vol.FileSystemLabel };",
          "                }",
          "            }",
          "        }",
          "    }",
          "",
          "    return $disklist",
          "}",
          "",
          "",
          "#",
          "# Retrieve EBS volumes associated with a Storage Spaces pool ",
          "#",
          "function Get-XenStorageSpacesEbsDiskMapping {",
          "    ",
          "    $disklist = @()",
          "",
          "    # For XEN attached EBS volumes the attachment order will be the serial number",
          "    $ATTACHMENT_ORDER_MATCH = '^(\\d{4})$'",
          "",
          "    # Exit if we are not on at least Server 2012",
          "    if (([Decimal]([environment]::OSVersion.Version).Major + [Decimal]([environment]::OSVersion.Version).Minor * .1) -lt 6.2) {",
          "        return $null",
          "    }",
          "",
          "    $physicalDisks = Get-PhysicalDisk | Where-Object {$_.SerialNumber -match $ATTACHMENT_ORDER_MATCH -and $_.FriendlyName -like 'AWS PVDISK'}",
          "    ",
          "    if ($physicalDisks.Count -eq 0) {",
          "        return $null",
          "    }",
          "",
          "    $InstanceId = Get-EC2InstanceMetadata \"meta-data/instance-id\"",
          "",
          "    $BlockDeviceMapping = (Get-EC2Instance -Instance $InstanceId).Instances.BlockDeviceMappings",
          "",
          "    foreach ($pd in $physicalDisks) {",
          "",
          "        $BlockDeviceName = Convert-SCSITargetIdToDeviceName $pd.SerialNumber",
          "",
          "        $device = $BlockDeviceMapping | Where-Object {$_.DeviceName -like (\"*\" + $BlockDeviceName)}",
          "    ",
          "        $ebsVolumeId = $device.Ebs.VolumeId",
          "",
          "        $pool1 = Get-StoragePool -PhysicalDisk $pd -IsPrimordial $False -ErrorAction SilentlyContinue",
          "",
          "        foreach ($vd in Get-VirtualDisk) {",
          "            $pool2 = Get-StoragePool -VirtualDisk $vd",
          "            if (($pool1 -like $pool2) -and  ($ebsVolumeId -ne $null)) {",
          "                $vol = ($vd | Get-Disk | Get-Partition | Get-Volume)",
          "                $diskList += New-Object PSObject -Property @{",
          "                    Disk          = If ($pd -eq $null) { $null } Else { $pd.DeviceId };",
          "                    Partitions    = 0;",
          "                    DriveLetter   = If ($vol -eq $null) { $null } Else { ($vol.DriveLetter + ':') };",
          "                    EbsVolumeId   = If ($pd -eq $null) { $null } Else { $ebsVolumeId };",
          "                    Device        = If ($pd -eq $null) { $null } Else { $device.DeviceName  };",
          "                    VolumeName    = If ($vol -eq $null) { $null } Else { $vol.FileSystemLabel };",
          "                }",
          "            }",
          "        }",
          "    }",
          "",
          "    return $disklist",
          "}",
          "",
          "",
          "#",
          "# Helper function to collect connected EBS volumes attached to local EC2 instance.",
          "#",
          "function Get-EbsDiskMapping {",
          "",
          "    Try {",
          "        $InstanceId = Get-EC2InstanceMetadata \"meta-data/instance-id\"",
          "        $BlockDeviceMappings = (Get-EC2Instance -Instance $InstanceId).Instances.BlockDeviceMappings",
          "    } Catch {",
          "        Write-Host \"Could not access the AWS API, therefore, VolumeId is not available. ",
          "        Verify that your instance role has Describe-Instances permission.\" -ForegroundColor Yellow",
          "        throw",
          "    }",
          "",
          "    $diskList = Get-WmiObject -Class Win32_DiskDrive | ForEach-Object {",
          "        $DiskDrive = $_",
          "        $Volumes = Get-WmiObject -Query \"ASSOCIATORS OF {Win32_DiskDrive.DeviceID='$($DiskDrive.DeviceID)'} WHERE AssocClass=Win32_DiskDriveToDiskPartition\" | ForEach-Object {",
          "            $DiskPartition = $_",
          "            Get-WmiObject -Query \"ASSOCIATORS OF {Win32_DiskPartition.DeviceID='$($DiskPartition.DeviceID)'} WHERE AssocClass=Win32_LogicalDiskToPartition\"",
          "        }",
          "        If ($DiskDrive.PNPDeviceID -like \"*PROD_PVDISK*\") {",
          "            $BlockDeviceName = Convert-SCSITargetIdToDeviceName($DiskDrive.SCSITargetId)",
          "            $BlockDevice = $BlockDeviceMappings | Where-Object { $_.DeviceName -like (\"*\" + $BlockDeviceName) }",
          "        } ElseIf ($DiskDrive.PNPDeviceID -like \"*PROD_AMAZON_ELASTIC_B*\") {",
          "            # If driver stack supports writing the EBS volume ID to SerialNumber then we use that",
          "            $volumeNumber = $DiskDrive.SerialNumber | Select-String $EBS_VOLUME_MATCH | % { $_.Matches } | % { $_.Value }",
          "   ",
          "            if ($volumeNumber -ne $null) {",
          "                $ebsVolumeId = \"vol-$volumeNumber\"",
          "                $BlockDevice = $BlockDeviceMappings | Where-Object { $_.Ebs.VolumeId -eq $ebsVolumeId }",
          "                $BlockDeviceName = $BlockDevice.DeviceName",
          "            } else {",
          "            $BlockDeviceName = Convert-SCSITargetIdToDeviceName($DiskDrive.SCSIPort)",
          "            $BlockDevice = $BlockDeviceMappings | Where-Object { $_.DeviceName -like (\"*\" + $BlockDeviceName) }",
          "            }",
          "",
          "        } ElseIf ($DiskDrive.PNPDeviceID -like \"*PROD_AMAZON_EC2_NVME*\") {",
          "            $BlockDeviceName = Get-EC2InstanceMetadata \"meta-data/block-device-mapping/ephemeral$($DiskDrive.SCSIPort - 2)\"",
          "            $BlockDevice = $null",
          "        } Else {",
          "            $BlockDeviceName = $null",
          "            $BlockDevice = $null",
          "        }",
          "        if ( $BlockDevice.Ebs.VolumeId -ne $null) {",
          "            New-Object PSObject -Property @{",
          "                Disk          = $DiskDrive.Index;",
          "                Partitions    = $DiskDrive.Partitions;",
          "                DriveLetter   = If ($Volumes -eq $null) { $null } Else { $Volumes.DeviceID };",
          "                EbsVolumeId   = If ($BlockDevice -eq $null) { $null } Else { $BlockDevice.Ebs.VolumeId };",
          "                Device        = If ($BlockDeviceName -eq $null) { $null } Else { $BlockDeviceName };",
          "                VolumeName    = If ($Volumes -eq $null) { $null } Else { $Volumes.VolumeName };",
          "            }",
          "        }",
          "    } | Sort-Object Disk",
          "",
          "    return $diskList",
          "}",
          "",
          "",
          "#",
          "# Get a mapping of the local drives to EBS volumes",
          "#",
          "function Get-EbsConnectedVolume",
          "{",
          "",
          "    $diskList = @()",
          "",
          "    $diskList += Get-EbsDiskMapping",
          "",
          "    $diskList += Get-XenStorageSpacesEbsDiskMapping",
          "",
          "    $diskList += Get-AwsNvmeStorageSpacesEbsDiskMapping",
          "",
          "    return $diskList",
          "}",
          "",
          "",
          "#",
          "# Complete the vss freeze",
          "#",
          "function VssFreeze() {",
          "    param(",
          "        [string[]]$Devices,",
          "        [string[]]$Volumes,",
          "        [boolean]$CopyOnly,",
          "        [boolean]$NoWriters",
          "    )",
          " ",
          "    $volumeList = Get-EbsConnectedVolume",
          "",
          "    $DrivesToFreeze = @()",
          "    foreach ($v in $volumeList) {",
          "        if ( ($v.DriveLetter -ne $null)) {",
          "            if ((($v.Device -ne $null) -and ($Devices.Contains($v.Device)) -or  ($Devices.Contains('/dev/' + $v.Device))) -or",
          "                (($v.EbsVolumeId -ne $null) -and $Volumes.Contains($v.EbsVolumeId))) {  ",
          "                $DrivesToFreeze += $v.DriveLetter",
          "            }",
          "        }",
          "    }",
          "    if ($Devices.Contains(\"/dev/sda1\")) {",
          "        Write-Error \"Freeze of the root volume is not supported through this command, use AWSWindows-CreateVssSnapshot to include the root volume\"",
          "        exit 1",
          "    }",
          "    if ($DrivesToFreeze.Count -eq 0) {",
          "",
          "        Write-Error \"No mounted EBS drives detected\"",
          "        exit 1",
          "    }",
          "    $DrivesToFreezeString = ($DrivesToFreeze | sort -Unique) -join ' '",
          "    $outString = \"Beginning Freeze for drives \" + $DrivesToFreezeString",
          "    Write-Output $outString",
          "    ",
          "    EbsVssFreeze $DrivesToFreezeString $CopyOnly $NoWriters",
          "}",
          "",
          "#",
          "# Complete the vss thaw",
          "#",
          "function VssThaw() {",
          "",
          "    if ((get-process \"ec2-vss-agent\" -ea SilentlyContinue) -eq $Null) { ",
          "        Write-Host \"ec2-vss-agent is not running, Freeze command must be run first, and Thaw must run within 10 seconds of completion\" ",
          "        $script:inProgress = $false",
          "        exit 1",
          "    }",
          "",
          "    $AppConsistent = EbsVssThaw",
          "    if ($AppConsistent) {",
          "        Write-Host 'Thaw successful'",
          "    } else {",
          "        Write-Host 'Thaw unsuccessful, snapshots may not be app consistent, see event log for more details'",
          "    }",
          "",
          "    $script:inProgress = $false    ",
          "    return $AppConsistent",
          "}",
          "",
          "if ($callLocal -ne $true) {",
          "    $Action = \"{{Action}}\"",
          "    Write-Host \"Starting AWSWindows-ManageVssIo $Action $(Get-Date)\"",
          "",
          "    if ($Action -eq \"Freeze\") {",
          "        $DevicesString = \"{{Devices}}\"",
          "        $Devices = $DevicesString.Split(\",\").Trim()",
          "        $VolumesString = \"{{Volumes}}\"",
          "        $Volumes = $VolumesString.Split(\",\").Trim()",
          "        Write-Host $Devices",
          "        Write-Host $Volumes",
          "",
          "        [boolean]$CopyOnly = [System.Convert]::ToBoolean(\"{{CopyOnly}}\")",
          "",
          "        [boolean]$NoWriters = [System.Convert]::ToBoolean(\"{{NoWriters}}\")",
          "",
          "        VssFreeze $Devices $Volumes $CopyOnly $NoWriters",
          "    } else {",
          "        $AppConsistent = VssThaw",
          "        exit [int](-not $AppConsistent)",
          "    }",
          "}",
          "",
          "",
          "",
          ""
        ],
        "workingDirectory": "",
        "timeoutSeconds": "400"
      }
    }
  ]
}
