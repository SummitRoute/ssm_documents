{
  "schemaVersion": "0.3",
  "assumeRole": "{{AutomationAssumeRole}}",
  "description": "Configure CloudWatch on Instance",
  "parameters": {
    "InstanceId": {
      "type": "String",
      "description": "(Required) InstanceId of the EC2 instance to configure"
    },
    "status": {
      "default": "Enabled",
      "type": "String",
      "description": "(Optional) Specifies whether to enable or disable CloudWatch. Valid values: \"Enabled\" | \"Disabled\"",
      "allowedValues": [
        "Enabled",
        "Disabled"
      ]
    },
    "AutomationAssumeRole": {
      "default": "",
      "type": "String",
      "description": "(Optional) The ARN of the role that allows Automation to perform the actions on your behalf."
    },
    "properties": {
      "default": "",
      "type": "String",
      "description": "(Optional) The configuration for CloudWatch in JSON format."
    },
    "LambdaAssumeRole": {
      "default": "",
      "type": "String",
      "description": "(Optional) The ARN of the role assumed by lambda"
    }
  },
  "mainSteps": [
    {
      "action": "aws:createStack",
      "inputs": {
        "StackName": "ConfigureCloudWatchOnInstanceStack{{automation:EXECUTION_ID}}",
        "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nConditions:\n  LambdaAssumeRoleNotSpecified:\n    Fn::Or:\n    - Fn::Equals:\n      - {Ref: LambdaRoleArn}\n      - ''\n    - Fn::Equals:\n      - {Ref: LambdaRoleArn}\n      - undefined\nDescription: Automation Stack for Configure CloudWatch on EC2 Instance\nParameters:\n  LambdaName: {Description: 'The lambda function name\n\n      ', Type: String}\n  LambdaRoleArn: {Default: '', Description: 'The ARN of the role that allows Lambda\n      created by Automation to perform the action on your behalf\n\n      ', Type: String}\nResources:\n  ConfigureCloudWatchOnEC2InstanceLambda:\n    Properties:\n      Code: {ZipFile: \"#\\n# Copyright 2018 Amazon.com, Inc. or its affiliates. All\\\n          \\ Rights Reserved.\\n#\\n# Permission is hereby granted, free of charge, to\\\n          \\ any person obtaining a copy of this\\n# software and associated documentation\\\n          \\ files (the \\\"Software\\\"), to deal in the Software\\n# without restriction,\\\n          \\ including without limitation the rights to use, copy, modify,\\n# merge,\\\n          \\ publish, distribute, sublicense, and/or sell copies of the Software, and\\\n          \\ to\\n# permit persons to whom the Software is furnished to do so.\\n#\\n\\\n          # THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\\n          \\ OR IMPLIED,\\n# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\\n          \\ FITNESS FOR A\\n# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\\\n          \\ THE AUTHORS OR COPYRIGHT\\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\\\n          \\ OTHER LIABILITY, WHETHER IN AN ACTION\\n# OF CONTRACT, TORT OR OTHERWISE,\\\n          \\ ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\n# SOFTWARE OR THE USE\\\n          \\ OR OTHER DEALINGS IN THE SOFTWARE.\\n#\\nimport boto3\\n\\n\\ndef handler(event,\\\n          \\ context):\\n\\tec2_client = boto3.client('ec2')\\n\\tinstance_id = event[\\\"\\\n          InstanceId\\\"]\\n\\tnew_state = event[\\\"status\\\"] or \\\"Enabled\\\"\\n\\n\\tif new_state\\\n          \\ == \\\"Enabled\\\":\\n\\t\\tec2_client.monitor_instances(InstanceIds=[instance_id])\\n\\\n          \\tif new_state == \\\"Disabled\\\":\\n\\t\\tec2_client.unmonitor_instances(InstanceIds=[instance_id])\\n\"}\n      FunctionName: {Ref: LambdaName}\n      Handler: index.handler\n      MemorySize: 128\n      Role:\n        Fn::If:\n        - LambdaAssumeRoleNotSpecified\n        - Fn::GetAtt: [LambdaRole, Arn]\n        - {Ref: LambdaRoleArn}\n      Runtime: python2.7\n      Timeout: 60\n    Type: AWS::Lambda::Function\n  LambdaRole:\n    Condition: LambdaAssumeRoleNotSpecified\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n        - Action: ['sts:AssumeRole']\n          Effect: Allow\n          Principal:\n            Service: [lambda.amazonaws.com]\n        Version: '2012-10-17'\n      Path: /\n      Policies:\n      - PolicyDocument:\n          Statement:\n            Action: ['ec2:MonitorInstances', 'ec2:UnmonitorInstances']\n            Effect: Allow\n            Resource: '*'\n          Version: '2012-10-17'\n        PolicyName: ConfigureCloudWatchOnEC2InstanceLambdaPolicy\n    Type: AWS::IAM::Role\n",
        "Parameters": [
          {
            "ParameterValue": "{{LambdaAssumeRole}}",
            "ParameterKey": "LambdaRoleArn"
          },
          {
            "ParameterValue": "CfgCwOnEc2InstanceLambda-{{automation:EXECUTION_ID}}",
            "ParameterKey": "LambdaName"
          }
        ],
        "Capabilities": [
          "CAPABILITY_IAM"
        ]
      },
      "name": "createDocumentStack"
    },
    {
      "action": "aws:invokeLambdaFunction",
      "inputs": {
        "FunctionName": "CfgCwOnEc2InstanceLambda-{{automation:EXECUTION_ID}}",
        "Payload": "{\"InstanceId\": \"{{InstanceId}}\", \"status\": \"{{status}}\" }"
      },
      "name": "configureCloudWatchOnInstance"
    },
    {
      "action": "aws:deleteStack",
      "inputs": {
        "StackName": "ConfigureCloudWatchOnInstanceStack{{automation:EXECUTION_ID}}"
      },
      "name": "deleteCloudFormationTemplate"
    }
  ]
}
