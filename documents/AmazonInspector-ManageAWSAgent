{
  "schemaVersion": "2.2",
  "description": "Manage AWS Agent on EC2 instances",
  "parameters": {
    "Operation": {
      "type": "String",
      "description": "(Required) The AWS Agent related action to perform. The install operation installs the AWS Agent on the System",
      "allowedValues": [
        "Install"
      ]
    }
  },
  "mainSteps": [
    {
      "precondition": {
        "StringEquals": [
          "platformType",
          "Linux"
        ]
      },
      "action": "aws:runShellScript",
      "name": "InstallInspectorOnLinux",
      "inputs": {
        "id": "0.aws:runShellScript",
        "timeoutSeconds": 600,
        "runCommand": [
          "#!/bin/bash",
          "#set -eux",
          "SECURE_TMP_DIR=$(mktemp -d /tmp/awsagent.XXXXXXXX)",
          "DOCUMENT_BUILD_VERSION=\"1.0.2\"",
          "PUBKEY_FILE=\"inspector.gpg\"",
          "INSTALLER_FILE=\"install\"",
          "SIG_FILE=\"install.sig\"",
          "PUBKEY_PATH=\"${SECURE_TMP_DIR}/${PUBKEY_FILE}\"",
          "INSTALLER_PATH=\"${SECURE_TMP_DIR}/${INSTALLER_FILE}\"",
          "SIG_PATH=\"${SECURE_TMP_DIR}/${SIG_FILE}\"",
          "if hash curl 2>/dev/null",
          "then",
          "  DOWNLOAD_CMD=\"curl -s --fail --retry 5 --max-time 30\"",
          "  CONSOLE_ARG=\"\"",
          "  TO_FILE_ARG=\" -o \"",
          "  HEADER_ARG=\" --head \"",
          "else",
          "  DOWNLOAD_CMD=\"wget --quiet --tries=5 --timeout=30 \"",
          "  CONSOLE_ARG=\" -qO- \"",
          "  TO_FILE_ARG=\" -O \"",
          "  HEADER_ARG=\" -S --spider \"",
          "fi",
          "METADATA_AZ=$( ${DOWNLOAD_CMD} ${CONSOLE_ARG} http://169.254.169.254/latest/meta-data/placement/availability-zone)",
          "METADATA_REGION=$( echo $METADATA_AZ | sed -e \"s/[a-z]*$//\" )",
          "if [[ -n \"${METADATA_REGION}\" ]]; then",
          "  REGION=${METADATA_REGION}",
          "else",
          "  echo \"No region information was obtained.\"",
          "  exit 2",
          "fi",
          "AGENT_INVENTORY_FILE=\"AWS_AGENT_INVENTORY\"",
          "BASE_URL=\"https://s3.dualstack.${REGION}.amazonaws.com/aws-agent.${REGION}/linux/latest\"",
          "PUBKEY_FILE_URL=\"${BASE_URL}/${PUBKEY_FILE}\"",
          "INSTALLER_FILE_URL=\"${BASE_URL}/${INSTALLER_FILE}\"",
          "SIG_FILE_URL=\"${BASE_URL}/${SIG_FILE}\"",
          "AGENT_METRICS_URL=\"${BASE_URL}/${AGENT_INVENTORY_FILE}?x-installer-version=${DOCUMENT_BUILD_VERSION}&x-installer-type=ssm-installer&x-op={{Operation}}\"",
          "function handle_status() {",
          "  local result_param=\"nil\"",
          "  local result=\"nil\"",
          "  if [[ $# -eq 0 ]]; then",
          "    echo \"Error while handling status function. At least one argument should be passed.\"",
          "      exit 129",
          "  else",
          "    if [[ $# > 1 ]]; then",
          "      result_param=$2",
          "    fi",
          "    result=$1",
          "  fi",
          "  #start publishing metrics",
          "  ${DOWNLOAD_CMD} ${HEADER_ARG} \"${AGENT_METRICS_URL}&x-result=${result}&x-result-param=${result_param}\"",
          "  echo \"Script exited with status code ${result} ${result_param}\"",
          "  if [[ \"${result}\" = \"SUCCESS\" ]]; then",
          "    exit 0",
          "  else",
          "    exit 1",
          "  fi",
          "}",
          "trap \"rm -rf ${SECURE_TMP_DIR}\" EXIT",
          "# Check that the dir exists and is owned by our euid (root)",
          "chmod 700 \"${SECURE_TMP_DIR}\"",
          "#get the public key",
          "${DOWNLOAD_CMD} ${TO_FILE_ARG} \"${PUBKEY_PATH}\" ${PUBKEY_FILE_URL}",
          "if [[ $? != 0 ]]; then",
          "  echo \"Failed to download public key from ${PUBKEY_FILE_URL}\"",
          "  handle_status \"FILE_DOWNLOAD_ERROR\" \"${PUBKEY_PATH}\"",
          "fi",
          "#get the installer",
          "${DOWNLOAD_CMD} ${TO_FILE_ARG} \"${INSTALLER_PATH}\" ${INSTALLER_FILE_URL}",
          "if [[ $? != 0 ]]; then",
          "  echo \"Failed to download installer from ${INSTALLER_FILE_URL}\"",
          "  handle_status \"FILE_DOWNLOAD_ERROR\" \"${INSTALLER_PATH}\"",
          "fi",
          "#get the signature",
          "${DOWNLOAD_CMD} ${TO_FILE_ARG} \"${SIG_PATH}\" ${SIG_FILE_URL}",
          "if [[ $? != 0 ]]; then",
          "  echo \"Failed to download installer signature from ${SIG_FILE_URL}\"",
          "  handle_status \"FILE_DOWNLOAD_ERROR\" \"${SIG_PATH}\"",
          "fi",
          "gpg_results=$( gpg -q --no-default-keyring --keyring \"${PUBKEY_PATH}\" --verify \"${SIG_PATH}\" \"${INSTALLER_PATH}\" 2>&1 )",
          "if [[ $? -eq 0 ]]; then",
          "  echo \"Validated \" \"${INSTALLER_PATH}\" \"signature with: $(echo \"${gpg_results}\" | grep -i fingerprint)\"",
          "else",
          "  echo \"Error validating signature of \" \"${INSTALLER_PATH}\" \", terminating.  Please contact AWS Support.\"",
          "  echo ${gpg_results}",
          "  handle_status \"SIGNATURE_MISMATCH\" \"${INSTALLER_PATH}\"",
          "fi",
          "bash ${INSTALLER_PATH}"
        ]
      }
    },
    {
      "precondition": {
        "StringEquals": [
          "platformType",
          "Windows"
        ]
      },
      "action": "aws:runPowerShellScript",
      "name": "InstallInspectorOnWindows",
      "inputs": {
        "id": "0.aws:runPowerShellScript",
        "timeoutSeconds": 600,
        "runCommand": [
          "function New-TemporaryDirectory {",
          "  $parent = [System.IO.Path]::GetTempPath()",
          "  [string] $name = [System.Guid]::NewGuid()",
          "  New-Item -ItemType Directory -Path (Join-Path $parent $name)",
          "}",
          "function Is-TLSVersion-Enabled {",
          "  param( [string]$TLSVersion )",
          "  [string] $TLSRegKey = \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS \" + $TLSVersion + \"\\Client\"",
          "  if (Test-path -path Registry::$TLSRegKey)",
          "  {",
          "    $TLSClientReg = Get-ItemProperty -Path Registry::$TLSRegKey",
          "    $TLSClientReg.Enabled -gt 0",
          "  }",
          "  else",
          "  {",
          "    $True",
          "  }",
          "}",
          "if (Is-TLSVersion-Enabled \"1.2\")",
          "{",
          "  Write-Host \"Using TLS 1.2\"",
          "  [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::TLS12",
          "}",
          "elseif (Is-TLSVersion-Enabled \"1.1\")",
          "{",
          "  Write-Host \"Using TLS 1.1\"",
          "  [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::TLS11",
          "}",
          "elseif (Is-TLSVersion-Enabled \"1.0\")",
          "{",
          "  Write-Host \"Defaulting to TLS 1.0\"",
          "}",
          "else",
          "{",
          "  Write-Host \"Installation failed, All supported TLS protocols are disabled\"",
          "  Write-Host $_.Exception|format-list -force",
          "  exit 7",
          "}",
          "$tempdir = New-TemporaryDirectory",
          "Set-Location -Path $tempdir",
          "$thumbprint=\"\"",
          "$agentInstaller=\"AWSAgentInstall.exe\"",
          "$region=%{iwr http://169.254.169.254/latest/meta-data/placement/availability-zone -UseBasicParsing | Select-Object -Expand Content | %{$_.TrimEnd([char[]]([char]\"a\"..[char]\"z\"))}}",
          "if ([string]::IsNullOrWhiteSpace($region))",
          "{",
          "  Write-Host \"Failed to retrieve instance region from meta-data\"",
          "  exit 1",
          "}",
          "if ($Env:os -ne \"Windows_NT\")",
          "{",
          "  Write-Host \"This step of SSM document can only install the Amazon Inspector Agent on Windows servers\"",
          "  exit 1",
          "}",
          "function Send-Metric {",
          "  Param([string]$result,[string]$result_param)",
          "  $partialMetricsUrl=\"https://s3.dualstack.\" + $region + \".amazonaws.com/aws-agent.\" + $region + \"/windows/awsagent/inventory.cab?x-installer-version=1.0.2&x-installer-type=ssm-installer&x-op={{Operation}}\"",
          "  $metricsUrl=$partialMetricsUrl + \"&x-result=\" + $result + \"&x-result-param=\" + $result_param",
          "  Try",
          "  {",
          "    Invoke-WebRequest -Method Head $metricsUrl",
          "  }",
          "  Catch",
          "  {",
          "  }",
          "}",
          "if (Get-Service \"AWS Agent Service\" -ErrorAction SilentlyContinue)",
          "{",
          "  Write-Host \"AWS Agent is already installed, Exiting\"",
          "  exit 0",
          "}",
          "$installerUrl=\"https://s3.dualstack.\" + $region + \".amazonaws.com/aws-agent.\" + $region + \"/windows/installer/latest/$agentInstaller\"",
          "Try",
          "{",
          "  Invoke-WebRequest $installerUrl -OutFile $agentInstaller",
          "}",
          "Catch",
          "{",
          "  Send-Metric \"FILE_DOWNLOAD_ERROR\" \"$agentInstaller\" ",
          "  Write-Host \"Error while downloading installer\"",
          "  Write-Host $_.Exception|format-list -force",
          "  exit 3",
          "}",
          "Try",
          "{",
          "  $installerSig=Get-AuthenticodeSignature -FilePath $agentInstaller",
          "  $thumbprint=$installerSig.SignerCertificate.Thumbprint",
          "  $certificateStatus=$installerSig.Status",
          "  Write-Host \"Thumbprint: \" $thumbprint",
          "  Write-Host \"Certificate status: \" $certificateStatus",
          "}",
          "Catch",
          "{",
          "  Send-Metric \"THUMBPRINT_RETRIEVAL_ERROR\" \"$agentInstaller\" ",
          "  Write-Host \"Error while retrieving installer certificate thumbprint\"",
          "  Write-Host $_.Exception|format-list -force",
          "  exit 4",
          "}",
          "if ($certificateStatus.value__ -ne [System.Management.Automation.SignatureStatus]::Valid.value__)",
          "{",
          "  Send-Metric \"CERTIFICATE_INVALID\" \"$agentInstaller\" ",
          "  Write-Host \"This is not signed by a valid certificate : \" $thumbprint",
          "  exit 7",
          "}",
          "else",
          "{",
          "  Write-Host \"Certificate validated \" ",
          "}",
          "$LATEST_CERTIFICATE_THUMBPRINT = \"5C2CB55A9AB9B1D63FF41B0DA276F2A92B09A86A\"",
          "$PREVIOUS_CERTIFICATE_THUMBPRINT = \"8880F2076855F15A17FEEC95651599F3460EDB8B\"",
          "if (($thumbprint -ne $LATEST_CERTIFICATE_THUMBPRINT) -and ($thumbprint -ne $PREVIOUS_CERTIFICATE_THUMBPRINT)) ",
          "{",
          "  Send-Metric \"SIGNATURE_MISMATCH\" \"$agentInstaller\" ",
          "  Write-Host \"Invalid installer signature : \" $thumbprint",
          "  exit 5",
          "}",
          "else",
          "{",
          "  Write-Host \"Signature validated : \" $thumbprint",
          "}",
          "Try",
          "{",
          "  $p = (Start-Process -FilePath \".\\$agentInstaller\" -ArgumentList \"/install /quiet /norestart\" -Wait -NoNewWindow -PassThru).ExitCode",
          "  if ($p -eq 3010)",
          "  {",
          "    Write-Host \"Installation succeeded, but there were files in use, please restart to complete installation.\"",
          "    exit 0",
          "  }",
          "  elseif ($p -eq 0)",
          "  {",
          "    Write-Host \"Installation succeeded\"",
          "  }",
          "  else",
          "  {",
          "    Write-Host \"Installation failed : \"  $p",
          "  }",
          "  exit $p",
          "}",
          "Catch",
          "{",
          "  Send-Metric \"INSTALLATION_FAILURE\" \"$agentInstaller\" \"\"",
          "  Write-Host \"Installation failed, exception raised during installation\"",
          "  Write-Host $_.Exception|format-list -force",
          "  exit 6",
          "}"
        ]
      }
    }
  ]
}
